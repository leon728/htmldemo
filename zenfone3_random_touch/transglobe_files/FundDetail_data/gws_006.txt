(function(d){
	//!## WFA
	//!### Sub Function
	d.extend({
		Between: function(a, b, c){	
			if((a >= b) && (a <= c)){
				return true;
			} else{
				return false;
			}	
		},
		IsBig5Set: function(high, low){
			if(d.Between(low, 0x40, 0x7E) || d.Between(low, 0xA1, 0xFE)){
				if (d.Between(high, 0xA3, 0xA3) && d.Between(low, 0xC0, 0xFE)){
					return false;
				}
				if (d.Between(high, 0xA1, 0xC5) || d.Between(high, 0xC9, 0xF9)){
					return true;
				} else if(d.Between(high, 0xC6, 0xC6) && d.Between(low, 0x40, 0x7E)){
					return true;
				}
			}
			return false;
		},
		Ascii2Hex: function(ascii){
			var digitArr=Array('0', '1', '2', '3', '4', '5', '6', '7' ,'8', '9' ,'A', 'B' ,'C', 'D', 'E', 'F');
			var result='';
			var start=true;
			for(var i=32; i>0; ){
				i-=4;
				var digit=(ascii >> i)&0xf;
				if(!start || digit != 0){
					start=false;						
					result+=digitArr[digit];
				}
			}	
			return result == '' ? '0' : result;
		},
		IsBig5: function(word){
			var ascii=word.charAt(0).charCodeAt(0);
			if(d.Between(ascii, 0xE000, 0xF8FF)){
				return false;
			} else{
				return true;
			}
		},
		GetCharsetType: function(word){
			var ascii=word.charAt(0).charCodeAt(0);
			var unicode=d.Ascii2Hex(ascii);
			var charsetType={
				alphanumeric: false,
				unicode: false,
				gaijis: false,
				mapping: false
			}
			if(!d.Between(ascii, 0x00, 0x7F)){ //Not Alphanumeric 
				charsetType.alphanumeric=false;
				if(d.Between(ascii, 0xE000, 0xF8FF)){ //Unicode Gaijis
					charsetType.unicode=true;
					charsetType.gaijis=true;
				} else{ //Not Unicode Gaijis
					var big5=mapping[unicode];
					if(typeof(big5) == 'undefined'){ //Not Found in Mapping

					}else{ //Found in Mapping
						charsetType.mapping=true;
						if((d.Between(low, 0x00, 0x7F)) && (high == 0x00)){
						}else{
							if(d.IsBig5Set(high, low)){ //Big5 Set
								charsetType.gaijis=false;
							}else{ //Big5 Gaijis
								charsetType.gaijis=true;
							}
						}
					}			
				}
			} else{ //Alphanumeric
				charsetType.alphanumeric=true;
			}
			return charsetType;
		},
		Big52Unicode: function(word){
			var Translate=function(high, low){
				var seq = 0;
				if((low < 0x40) || (low > 0xFE)){
					return (-1);
				}
				if((0x7F <= low) && (low <= 0xA0)){
					return (-1);
				}
				if((0xFA <= high) && (high <= 0xFE)){
					high=high-0xFA;
				} else if((0x8E <= high) && (high <=0xA0)){
					high=high-0x8E + 5;
				} else if((0x81 <= high) && (high <= 0x8D)){
					high=high-0x81 + 24;
				} else if((0xC6 <= high) && (high <= 0xC8)){
					if((high == 0xC6) && (low < 0xA1)) return (0);
					if(low >= 0xA1){
						low=63 + (low - 0xA1);
					}
					else{
						low-=0x40;
					}
					high=high-0xC6+37;
					seq=157*high+low-63;
					return seq;
				} else{
					return (-1);
				}
				seq=157*high;
				if(low>=0xA1){
					low=63+(low-0xA1);
				}
				else{
					low-=0x40;			
				}
				return seq+low;		
			}
			var big5='0x'+escape(word).substr(2, 4);
			var decimal=parseInt(big5);
			var high=(decimal >> 8) & 0xFF;
			var low=(decimal & 0xFF);
			return String.fromCharCode(0xE000+Translate(high, low))
		},
		FirefoxUAO: function(elem){
			//!+ **firefoxUAO(elem)**
			var str, sentence, sentence2;
			for(var i in elem){
				if(d.user.prototypeDebug == true && !elem.hasOwnProperty(i)) continue;
				if(elem[i].nodeValue == null){
					if(elem[i].innerHTML.length > 0) {
						// Get innerHTML
						sentence=elem[i].innerHTML;
						sentence=sentence.split('');
						sentence2='';
						for(var j in sentence){
							if(d.user.prototypeDebug == true && !sentence.hasOwnProperty(j)) continue;
							str=sentence[j];
							if(typeof(d.mapping['uao'][escape(str)]) !== 'undefined'){
								sentence2+=String.fromCharCode(d.mapping['uao'][escape(str)]);
							} else{
								sentence2+=str;
							}
						}
						elem[i].innerHTML=sentence2;
					} else{
						// Get Value
						sentence=elem[i].value;
						sentence=sentence.split('');
						sentence2='';
						for(var j in sentence){
							if(d.user.prototypeDebug == true && !sentence.hasOwnProperty(j)) continue;
							str=sentence[j];
							if(typeof(d.mapping['uao'][escape(str)]) !== 'undefined'){
								sentence2+=String.fromCharCode(d.mapping['uao'][escape(str)]);
							} else{
								sentence2+=str;
							}
						}
						elem[i].value=sentence2;
					}
				} else{
					// Get nodeValue
					sentence=elem[i].nodeValue;
					sentence=sentence.split('');
					sentence2='';
					for(var j in sentence){
						if(d.user.prototypeDebug == true && !sentence.hasOwnProperty(j)) continue;
						str=sentence[j];
						if(typeof(d.mapping['uao'][escape(str)]) !== 'undefined'){
							sentence2+=String.fromCharCode(d.mapping['uao'][escape(str)]);
						} else{
							sentence2+=str;
						}
					}
					elem[i].nodeValue=sentence2;
				}
			}
		},
		Str2UTF8: function(str){
			var utf8=escape(str);
			if(utf8.length == 6){
				return utf8.substr(2, 4);	
			} else if(utf8.length == 12){
				return utf8.substr(2, 4)+utf8.substr(8, 12);
			} else{
				return null
			}
		},
		UrlUTF82UTF8: function(str){
			str=decodeURI(str);
			return str;
		},
		Str2UrlUTF8: function(type, str) {
			//!+ **Str2UrlUTF8(type, str)**	
			//! + description: ex: %EE%80%80
			var utf8=[];
			var unicode=null;
			for(var i in str){
				if(d.user.prototypeDebug == true && !str.hasOwnProperty(i)) continue;
				if(type == 'unicode'){
					unicode=escape(str[i]);
					str[i]=String.fromCharCode(d.mapping['unicode'][unicode.substr(2, 4)]);	
				}
				try{
					utf8[i]=encodeURI(str[i]);
				} catch(e){

				}
			}
			return utf8;
		},
		GetValue: function(elem){
			//!+ **GetValue(elem)**
			if(typeof(elem.value) !== 'undefined' && elem.value !== null){
				return elem.value;
			} else if(typeof(elem.innerHTML) !== 'undefined' && elem.innerHTML !== null){
				return elem.innerHTML
			} else if(typeof(elem.nodeValue) !== 'undefined' && elem.nodeValue !== null){
				return elem.nodeValue;
			} else{
				return elem;
			}
		},
		NotSearch: function(elem, classname){
			var mismatch=false;
			for(var j=0; j < classname.length; j++){
				if(elem.className.search(classname[j]) >= 0){
					mismatch=true;
				}
			}
			if(mismatch === true) return true;
			return false;
		},
		GetChildred: function(type, parent, elem, str){
			var val, child, childred, check;
			elem=elem ? elem : [];
			str=str ? str : [];
			parent=typeof(parent.length) != 'undefined' ? parent : [parent];
			for(var i=0; i < parent.length; i++){
				child=parent[i];
				if(typeof(child) === 'undefined') continue;
				if(type == 'gaiji'){
					if(!d.CanListen(child)) continue;
				}
				if(child.nodeType === 3){
					if((child.parentNode.nodeName).toUpperCase() == 'TEXTAREA'){	
						val=child.parentNode.value;
						if(type == 'all'){
							elem.push(child.parentNode);
						} else{
							check=d.CheckStr(type, val);
							if(check['match']){
								elem.push(child.parentNode);
								for(j=0; j < check.str.length; j++) str.push(check.str[j]);
							}	
						}

					} else if((child.parentNode.nodeName).toUpperCase() == 'OPTION'){
						val=child.nodeValue;
						if(type == 'all'){
							elem.push(child.parentNode.parentNode);
						} else{
							check=d.CheckStr(type, val);
							if(check['match']){
								elem.push(child.parentNode.parentNode);
								for(j=0; j < check.str.length; j++) str.push(check.str[j]);
							}
						}
					} else {
						if(type == 'all'){
							elem.push(child);
						} else{
							val=child.nodeValue;
							check=d.CheckStr(type, val);
							if(check['match']){
								elem.push(child);
								for(j=0; j < check.str.length; j++) str.push(check.str[j]);
							}
						}		
					}
				} else if(((child.nodeName).toUpperCase() == 'INPUT' && ((child.type).toUpperCase() == 'TEXT' || (child.type).toUpperCase() == 'BUTTON')) || ((child.nodeName).toUpperCase() == 'TEXTAREA')){				
					if(type == 'all'){
						elem.push(child);
					} else{
						val=child.value;
						check=d.CheckStr(type, val);
						if(d.user.setGaijiClass == true) elem.push(child);
						if(check['match']){
							if(d.user.setGaijiClass != true) elem.push(child);
							for(j=0; j < check.str.length; j++) str.push(check.str[j]);	
						}
					}
				} else if((child.nodeName).toUpperCase() != 'SCRIPT'){
					childred=d.GetChildred(type, child.childNodes, elem, str);
					elem=childred.elem;
					str=childred.str;
				}
			}
			return {elem: elem, str: str};
		},
		SelectByNodeName: function(nodeName, elem){
			var arr=[];
			for(var i=0; i < elem.length; i++){
				if(elem[i].nodeName.toUpperCase() == nodeName.toUpperCase()){
					arr.push(elem[i]);
				}				
			}
			return arr;		
		},
		GetNode: function(type, parent){
			//!+ **GetNode(type, elem)**
			//! + description: ex: <span>Apple</span>
			var childred;
			var result={elem: [], str: []};
			if(typeof(parent) == 'undefined') return {elem:[], str:[]}
			var parent=typeof(parent.length) != 'undefined' ? parent : [parent];
			for(var i=0; i < parent.length; i++){
				childred=d.GetChildred(type, parent[i]);
				result={
					elem: result['elem'].concat(childred.elem),
					str: result['str'].concat(childred.str)
				}
			}
			return result;
		},
		Is4byte: function(str){
			if(typeof(str[0]) !== 'undefined' && str[0].charCodeAt(0) >= '0xD800' && str[0].charCodeAt(0) <= '0xDBFF'){
				if(typeof(str[1]) !== 'undefined' && str[1].charCodeAt(0) >= '0xDC00' && str[1].charCodeAt(0) <= '0xDFFF'){
					return str[0]+str[1];
				}
			}
			if(typeof(str[2]) !== 'undefined' && str[2].charCodeAt(0) >= '0xDC00' && str[2].charCodeAt(0) <= '0xDFFF'){
				if(typeof(str[1]) !== 'undefined' && str[1].charCodeAt(0) >= '0xD800' && str[1].charCodeAt(0) <= '0xDBFF'){
					return str[1]+str[2];
				}
			}
			return false;
		},
		GetIgnore: function(){
			var ignore=[];
			if(typeof(d.font[d.glob.code['wfa']]['ignore']) == 'undefined') return;
			for(var i in d.font[d.glob.code['wfa']]['ignore']){
				var ignoreOS=d.font[d.glob.code['wfa']]['ignore'][i];
				for(var j=0; j < ignoreOS.length; j++){
					if(ignoreOS[j] == dynaRequire.GetOS()['os']){
						ignore.push(i);
					}
				}
			}
			return ignore;
		},
		CheckStr: function(type, val){
			//!+ **CheckStr(type, elem)**	
			var word;
			var match=false;
			var str=[];
			var sentence=[];
			var val=val.length > 0 ? val.split('') : val;

			if(d.font[d.glob.code['wfa']]['range'] === true){
				for(var i=0; i < val.length; i++){
					if(type == 'gaiji'){
						str.push(val[i]);
						match=true;
					}
				}
			} else{
				for(var i=0; i < val.length; i++){
					switch(type){
						case 'gaiji': // check gaiji
							for(var j in d.font[d.glob.code['wfa']]['range']){
								if(d.user.prototypeDebug == true && !(d.font[d.glob.code['wfa']]['range']).hasOwnProperty(j)) continue;
								var stop=false;
								for(var k in d.glob.ignore){
									if(j == d.glob.ignore[k]){
										stop=true;
										break;
									}
								}
								if(stop == true) continue;
								if(j == '4byte'){ // 4byte
									var range=d.font[d.glob.code['wfa']]['range'][j];
									for(k=0; k < range.length; k++){
										for(var l in range[k]){
											if(d.user.prototypeDebug == true && !(range[k]).hasOwnProperty(l)) continue;
											word=val[i+k];
											sentence[k]=word;
											if(typeof(word) !== 'undefined' && word.charCodeAt(0) >= l && word.charCodeAt(0) <= range[k][l]){
												if(k+1 == range.length){
													str.push(sentence.join(''));
													sentence.length=0;
													match='4byte';
												}
												continue;
											} else{
												break;
											}
										}
									}
								} else if((typeof(j) == 'string') && (typeof(d.font[d.glob.code['wfa']]['range'][j]) != 'string')){
									for(var k in d.font[d.glob.code['wfa']]['range'][j]){
										for(var l in d.font[d.glob.code['wfa']]['range'][j][k]){
											if(val[i].charCodeAt(0) >= l && val[i].charCodeAt(0) <= d.font[d.glob.code['wfa']]['range'][j][k][l]){ // 2byte
												str.push(val[i]);
												match=true;
											}
										}
									}
								} else if((typeof(j) == 'string') && (typeof(d.font[d.glob.code['wfa']]['range'][j]) == 'string')){
									if(val[i].charCodeAt(0) >= j && val[i].charCodeAt(0) <= d.font[d.glob.code['wfa']]['range'][j]){ // 2byte
										str.push(val[i]);
										match=true;
									}
								} 
							}	
							break;
						case 'unicode':
							// Check Unicode
							word={
								'raw': val[i],
								'unicode': escape(val[i])
							}
							if(word['unicode'].length === 6){
								// Unicode Change
								word['utf16']=word['unicode'].substr(2, 4);
								if(typeof(d.mapping['unicode'][word['utf16']]) !== 'undefined'){
									// All Not Unicode Font
									match=true;
								} else {
									// Unicode Font(Not Have Gaijis)	
									str.push(word['raw']);
									match='Not Exists';
								}
								if(typeof(d.mapping['unicode']['0x'+word['utf16']]) !== 'undefined'){
									// Unicode Font(Have Gaijis)
									str.push(word['raw']);
									match='Exists';							
								} else if(typeof(d.mapping['unicode']['0'+word['utf16']]) !== 'undefined'){
									// Unicode Font(Have Gaijis) Compatibility
									str.push(word['raw']);
									match='Exists(Compatibility)';
								}
							}
							break;
						case 'uao':
							// Check UAO
							if(typeof(d.mapping['uao'][escape(val[i])]) !== 'undefined'){
								str.push(val[i]);
								match=true;
							}		
							break;
						case 'all':
							str.push(val[i]);
							match=true;		
							break;
					}
				}
				//match: true, exists, 4byte
			}
			return {match: match, str: str};
		},
		ReplaceNode: function(){
			//!+ **ReplaceNode(type, elem, nodeType, fontClass, ff)**	
			//! + description: replace gaiji node
			// IE7 Not Support font-family:font1,font2
			// Declare
			var span, check, word, sentence, val;
			var nodeName=['INPUT', 'TEXTAREA', 'SELECT'];
			var options=arguments[0];
			var setting={
				fontClass: d.font[d.glob.code['wfa']]['fontClass'],
				fontface: d.font[d.glob.code['wfa']]['fontface'],
				count: null
			}
			var s=d.extend(true, setting, options);
			for(var i in s.elem){
				if(d.user.prototypeDebug == true && !s.elem.hasOwnProperty(i)) continue;
				if(s.elem[i].nodeType === 3){ // string
					sentence='',
					val=(s.elem[i].nodeValue).split('');
					switch(s.type){
						case 'gaiji':
							for(var j=0; j < val.length; j++){
								word={
									'4byte': val[j]+val[j+1],
									'2byte': val[j]
								}
								check=d.CheckStr(s.type, word['4byte']);
								if(check['match'] === true){
									if(d.user['showType'] === 'image'){ // image
										var url=d.Str2UTF8(word['2byte']);
										if(url == null){
											sentence=sentence+'<span class="'+s.fontClass+' '+d.user.gajisClass+'">'+word['2byte']+'</span>';
										} else{
											sentence=sentence+'<img src="'+d.glob['url']+d.user['imgPath']+url+'.png" class="'+s.fontClass+' '+d.user.gajisClass+'">';
										}
									} else{ // string
										sentence=sentence+'<span class="'+s.fontClass+' '+d.user.gajisClass+'">'+word['2byte']+'</span>';
									}
								} else if(check['match'] === '4byte'){
									if(d.user['showType'] === 'image'){ // image
										var url=d.Str2UTF8(word['4byte']);
										if(url == null){
											sentence=sentence+'<span class="'+s.fontClass+' '+d.user.gajisClass+'">'+word['4byte']+'</span>';
										} else{
											sentence=sentence+'<img src="'+d.glob['url']+d.user['imgPath']+url+'.png" class="'+s.fontClass+' '+d.user.gajisClass+'">';
										}
									} else{ // string
										sentence=sentence+'<span class="'+s.fontClass+' '+d.user.gajisClass+'">'+word['4byte']+'</span>';
									}
									j++;
								} else{
									sentence=sentence+val[j];
								}
							}
							break;
					}
					if(s.elem[i].parentNode.className.indexOf(d.user['gajisClass']) >= 0){ // gaiji class is exist
						s.elem[i].parentNode.className='';
						d.CreateClass(s.elem[i].parentNode, s.fontClass);
						d.CreateClass(s.elem[i].parentNode, d.user.gajisClass);
					} else{ // gaiji class isn't exist
						d.ReplaceWith(s.elem[i], sentence);
					}
					
				} else {
					// Not String
					sentence='';
					for(var j in nodeName){
						if(d.user.prototypeDebug == true && !nodeName.hasOwnProperty(j)) continue;
						if(s.elem[i].nodeName == nodeName[j]){
							if(s.elem[i].nodeName == 'INPUT' && s.elem[i].type != 'text') return;
							switch(s.type){
								case 'gaiji':
									d.DeleteClass(s.elem[i], 'dcw-font', 'fuzzy');
									d.CreateClass(s.elem[i], s.fontClass);
									break;
								case 'unicode':
									var unicode, utf16;
									var match=false;
									val=(s.elem[i].value).split('');
									aa=''
									for(var k in val){
										if(d.user.prototypeDebug == true && !val.hasOwnProperty(k)) continue;
										word=val[k];
										unicode=escape(word);
										utf16=unicode.substr(2, 4);
										check=d.CheckStr(s.type, word);
										if(check['match'] === 'Exists'){
											// Unicode Exists 
											var cs=String.fromCharCode(d.mapping['unicode']['0x'+utf16]);
											cs=d.IsBig5(cs) ? d.Big52Unicode(cs) : cs;
											sentence+=cs;
											match=true;
										}else if(check['match'] == 'Exists(Compatibility)'){
											var cs=String.fromCharCode(d.mapping['unicode']['0'+utf16]);
											cs=d.IsBig5(cs) ? d.Big52Unicode(cs) : cs;
											sentence+=cs;
											match=true;
										} else if(check['match'] == 'Not Exists'){
											// Unicode Not Exists 
											switch(d.user.unicode2big5['action']){
												case 'alert':
													alert(d.user.unicode2big5['message'][d.user.lang]+'\n\n'+word);
													break;
												case 'console':
													console.log(d.user.unicode2big5['message'][d.user.lang]+'\n\n'+word);
													break;
											}
											if(d.user.unicode2big5['remove'] !== true){
												// Not Remove Not Exists Unicode
												sentence+=String.fromCharCode(d.mapping['unicode']['0'+utf16]);
											}
											match=true;
										}
										else {
											sentence+=word;
										}
									}
									if(match){
										s.elem[i].value=sentence;
										d.CreateClass(s.elem[i], s.fontClass);
										s.elem[i].style.fontFamily=s.count == null || s.count < 1  ? s.fontface : s.fontface+s.count;
									}
									break;	
							}
						}
					}
				}
			}
			if(s.type == 'gaiji'){
				d.SetFontFace({
					target: d.DOM(s.fontClass, 'class'),
					fontface: s.count == null || s.count < 1 ? s.fontface : s.fontface+s.count
				})				
			}

		},
		IsNewGaiji: function(arr, arr2){
			var match, isNewGaiji;			
			for(var i in arr){
				if(d.user.prototypeDebug == true && !arr.hasOwnProperty(i)) continue;
				for(var j in arr2){
					if(d.user.prototypeDebug == true && !arr2.hasOwnProperty(j)) continue;
					if(arr[i] == arr2[j]) match=true;
				}
				if(match) match=false;
				else isNewGaiji=true;
			}
			return isNewGaiji;
		},
		SetFontFaceOuter: function(code){
			d.user.code['wfa']=code;
			d.StartGWS();
		},
		GetSelectNode: function(nodeName, elem){
			var arr=[];
			for(var i in elem){
				if(d.user.prototypeDebug == true && !elem.hasOwnProperty(i)) continue;
				if(elem[i].nodeName.toUpperCase() == nodeName.toUpperCase()){
					arr.push(elem[i]);
				}
			}
			return arr;
		}
	});
	//!### Main Function
	d.extend({
		StartWFA: function(options){	
			d.Log('## Start WFA', 3);
			d.SetState('Start WFA');
			var setting={
				elem: d.font[d.glob.code['wfa']]['object'],
				str: null,
				code: d.glob.code['wfa'],
				unicode2big5: d.glob.features['unicode'],
				webFullCSS: d.user.webFullCSS,
				imeFullCSS: d.user.imeFullCSS,				
				isWIME: false // write into wime css
			}
			setting=d.extend(true, setting, options);

			if(typeof(d.glob.reWFAID[0]) !== 'undefined') clearTimeout(d.glob.reWFAID[0]);
			if(setting.unicode2big5){
				d.PartWFA({
					type: 'unicode',
					elem: setting['elem'],
					conn: false
				});					
			}
			if(d.glob.fullGaiji[setting['code']] == true || setting['webFullCSS'] == true ||
			(setting['isWIME'] == true && setting['imeFullCSS'] == true)){ // full CSS
				d.glob.fullGaiji[setting['code']]=true;
				d.FullWFA(setting['elem']);
			} else{ // part CSS
				if(d.glob.features['wime'] === true && d.user.imeNewCSS['enable'] == true && setting['isWIME'] == true){
					d.PartWFA({
						type: 'gaiji',
						elem: setting['elem'],
						code: setting['code'],
						str: d.Str2UrlUTF8('gaiji', setting['str']).concat(d.glob.gaiji[d.user.imeNewCSS['id']]),
						fontClass: d.font[setting['code']]['fontClass']+d.user.sign['wime'],
						fontface: d.font[setting['code']]['fontface']+d.user.sign['wime'],
						fontID: d.user.imeNewCSS['id']
					});
				} else{
					d.PartWFA({
						type: 'gaiji',
						elem: setting['elem'],
						code: setting['code'],
						count: d.glob.count[setting['code']]
					});
				}
			}
		},
		FullWFA: function(elem){
			//!+ **FullWFA(obj)**	
			d.Log('## FullWFA', 3);
			d.SetState('Full WFA: '+d.font[d.glob.code['wfa']]['fontface']);
			d.glob.fullGaiji[d.glob.code['wfa']]=true;
			d.InsertScript('css', d.glob['url']+d.user['cssPath']+d.font[d.glob.code['wfa']]['fontface']+d.glob['extendName']+'.css', d.font[d.glob.code['wfa']]['fontID']);
			var node=d.GetNode('gaiji', elem); //Get Parent All Match ['elem'] and ['str'] 
			if(node['elem'].length > 0){
				// Gaijis Elem > 0
				d.Log(' + Find Gaijis Element: '+node['elem'].length);
				d.ReplaceNode({
					type: 'gaiji',
					elem: node['elem'],
					fontface: d.font[d.glob.code['wfa']]['fontface'],
					fontClass: d.font[d.glob.code['wfa']]['fontClass']
				});
			}
			if(d.user.reWFA === true){
				if(d.glob.reWFAID[0]) clearTimeout(d.glob.reWFAID[0]);
				d.glob.reWFAID[0]=setTimeout(function(){d.FullWFA(obj)}, d.user['reWFATimer']);
			}
		},
		CreateStyle: function(css, id){
			var elem;
			var head=document.head || document.getElementsByTagName('head')[0];
			if(document.getElementById(id)){
				elem=document.getElementById(id);
			} else{
				elem=document.createElement('style');
				elem.type='text/css';
				elem.id=id;
				head.appendChild(elem);
			}
			if(elem.styleSheet){
				elem.styleSheet.cssText=css;
			} else {
				elem.appendChild(document.createTextNode(css));
			}
		},
		PartWFA: function(){
			//!+ **PartWFA(type, obj, str, fontClass, ff, ID, conn)**
			d.Log('## PartWFA', 3);
			var isNewGaiji, elem, filename;
			var options=arguments[0];
			var setting={
				type: 'gaiji',
				elem: '',				
				str: '',	
				code: d.glob.code['wfa'],	
				count: null,	
				fontClass: d.font[d.glob.code['wfa']]['fontClass'],				
				fontface: d.font[d.glob.code['wfa']]['fontface'],				
				fontID: d.font[d.glob.code['wfa']]['fontID'],
				conn: true
			}
			setting=d.extend(true, setting, options);
			d.SetState('Part WFA('+setting.type+'): '+d.font[d.glob.code['wfa']]['fontface']);
			var node=d.GetNode(setting['type'], setting['elem']); //get parent all match ['elem'] and ['str'] 
			d.glob.gaiji[setting['fontID']]=d.glob.gaiji[setting['fontID']] ? d.glob.gaiji[setting['fontID']] : [];
			if(!setting['str']){ // filter all string
				setting['str']=node['str'];
				setting['str']=d.DeleteEmpty(setting['str']);
				setting['str']=d.DeleteDuplicates(setting['str']);
				setting['str']=d.Str2UrlUTF8(setting['type'], setting['str']);
			} else{
				setting['str']=d.DeleteEmpty(setting['str']);
			}
			if(setting['type'] == 'gaiji') isNewGaiji=d.IsNewGaiji(setting['str'], d.glob.gaiji[setting['fontID']]);
			if(isNewGaiji){ // now string > original string, and connect socket get new css
				d.glob['fontID']=setting['fontID'];
				var log=[
				' + **'+setting['fontID']+'** Find New String',
				' + *OLD('+d.glob.gaiji[setting['fontID']].length+'): '+d.glob.gaiji[setting['fontID']],
				' + *NEW('+setting['str'].length+'): '+setting['str']
				]
				d.Log(d.log, 1);
				// string filter
				d.glob.gaiji[setting['fontID']]=setting['str'].concat(d.glob.gaiji[setting['fontID']]);
				if(setting['conn']){
					if(d.user['oneFont'] == false || d.glob.gaiji[setting['fontID']].length > 1){
						filename=d.GetRandomFilename();
						if(setting['count'] != null){
							setting['count']++;
							d.glob.count[setting['code']]=setting['count'];
						}
						d.ConnectSocket(
							d.GetWFAQuery({
								'str': d.glob.gaiji[setting['fontID']],
								'code': setting['code'],
								'fontface': setting['count'] == null ? setting['fontface'] : setting['fontface']+setting['count'],
								'filename': filename
							}),
							function(){ // connect socket finish, replace gaiji
								d.InsertScript('css', d.glob['url']+d.user['cssTempPath']+filename+'.css', setting['fontID']);
								d.ReplaceNode({
									type: setting['type'],
									elem: node['elem'],
									fontClass: setting['fontClass'],
									fontface: setting['fontface'],
									count: setting['count']
								});
								d.SetState('Finish');
							}
						);
					} else if(d.user['oneFont'] == true && d.glob.gaiji[setting['fontID']].length == 1){
						filename=d.UrlUTF82UTF8(d.glob.gaiji[setting['fontID']][0]); // %EE%80%81 -> 
						filename=d.Str2UTF8(filename); //  -> E001
						var fontface=setting['count'] == null ? setting['fontface'] : setting['fontface']+setting['count'];
						var css='@font-face{font-family: '+fontface+'; src:url("'+d.glob.url+d.user.fontPath+d.font[setting['code']]['fontface']+'/'+filename+d.glob['extendName']+'.png");}';
						d.CreateStyle(css, setting['fontID']+'style');
						d.ReplaceNode({
							type: setting['type'],
							elem: node['elem'],
							fontClass: setting['fontClass'],
							fontface: fontface,
							count: setting['count']
						});
						d.glob['state']='Finish';
					}
				}
			} else if(node['elem'].length > 0){
				// now node > 0, replace node
				d.Log(' + **'+setting['fontID']+'** Find Node: '+node['elem'].length, 1);
				d.ReplaceNode({
					type: setting['type'],
					elem: node['elem'],
					count: setting['count']
				});
				d.SetState('Finish');
			} else if(d.glob['fontID'] != setting['fontID']){
				d.glob['fontID']=setting['fontID'];
				d.ReplaceNode({
					type: setting['type'],
					elem: node['elem'],
					fontClass: setting['fontClass'],
					fontface: setting['fontface'],
					count: setting['count']
				});
				d.SetState('Finish');
			} else{
				d.SetState('Finish');
			}
			if(d.user.reWFA === true && setting['fontID'] == d.font[d.glob.code['wfa']]['fontID']){
				if(d.glob.reWFAID[0]) clearTimeout(d.glob.reWFAID[0]); 
				d.glob.reWFAID[0]=setTimeout(function(){d.StartWFA()}, d.user['reWFATimer']);
			}
		},	
		GetRandomFilename: function(){
			return dynaRequire.GetRandom(0, 735723)+d.glob['extendName']+'.png';
		},
		ConnectSocket: function(query, Callback){
			//! + description: use query connect queryMDB and callback.(WIME or PPWIME)
			d.SetState('Connect Socket');
			if(d.user.queryType == 'ajax'){ // ajax
				if(d.user.autoFull == true && query['json']['wd'].split('').length > 2048){
					d.glob.fullGaiji[d.glob.code['wfa']]=true;
					d.StartWFA();
					Callback();
				} else{
					var ReadyGo=function(){
						Callback();
					}	
					query['json']=JSON.stringify(query['json']);	
					d.SendXmlHttpRequest(query['url'], 'POST', true, query['json'], ReadyGo);
				}
				d.Log('ConnectSocket: '+query['json'], 1);
			}
			else{ // query
				if(d.user.autoFull == true && query.split('').length > 2048){
					d.glob.fullGaiji[d.glob.code['wfa']]=true;
					d.StartWFA();
					if(d.IsHere('candidate')){
						var str=d.DOM(d.user.WIME.candidate['strID'], 'class');
						for(var i=0; i < str.length; i++){
							str[i].style.fontFamily=d.font[d.glob.code['wime']]['fontface'];
						}					
					}
				} else{
					d.InsertScript('javascript', query, d.user.socket['id']);
					dynaRequire.ReadyGo(
						function(){
							d.glob['socketState']=false;
							d.glob['monitorState']=false; //Warning: This Variable has been DEPRECATED. Relying on this feature is highly discouraged. Set the current active configuration setting of 'socketState'
							Callback();
						},
						function(){
							if(d.glob['socketState'] === true || d.glob['monitorState'] === true){
								return true;
							} else{
								return false;
							}
						}
					);
				}
				d.Log('ConnectSocket: '+query, 1);
			}
		},
		GetWFAQuery: function(setting){
			//!+ **GetWFAQuery(str, ff)**
			//! + description: connect socket return new CSS filename
			d.Log('## GetWFAQuery', 3);
			var url=d.glob['url']+d.user['preprocessorPath']+d.user.socket['filename']+d.user['preprocessor'];
			var fontFN=typeof(d.font[setting['code']]['fontFN']) == 'undefined' ? d.font[setting['code']]['fontface'] : d.font[setting['code']]['fontFN']
			if(d.user['queryType'] == 'ajax'){
				// Ajax
				var query={
					'url': url+'?queryType=ajax',
					'json': {
						'tf': fontFN,
						'fn': setting['filename'],
						'wd': ' '+decodeURI(setting['str'].toString()),
						'ff': setting['fontface'],
						'pnglocation': d.user['pngPath']+setting['filename'],
						'isUTF8': true,
					 	'theProtocol': d.glob['theProtocol'],
						'useBrowser': d.glob['fontType'],
						'PEncode': d.glob['pageEncode']
					}
				}
			}
			else{
				// Query
				query=url+
				'?queryType='+d.user['queryType']+
				'&tf='+fontFN+
				'&wd='+' '+setting['str']+
				'&fn='+setting['filename']+
				'&ff='+setting['fontface']+
				'&pnglocation='+d.user['pngPath']+setting['filename']+
				'&isUTF8=true'+
				'&theProtocol='+d.glob['theProtocol']+
				'&useBrowser='+d.glob['fontType']+
				'&PEncode='+d.glob['pageEncode'];
			}
			return query;
		}
	});
	//!### User Options
	d.extend(true, d.user, {
		autoFull: true, 
		oneFont: true,
		setGaijiClass: false, //!+ **setGaijiClass** if true, form all set gaiji Class and Fontface
		reWFA: false, //!+ **reWFA** if true, **reWFA** WFA will replay by timer
		reWFATimer: 1000 //!+ **reWFATimer** speed **reWFATimer** of replay(per millisecond)
	});	
	//!### Global
	d.extend(true, d.glob, {
		code: {
			'wfa': 1
		},
		socketState: false, //!+ **socketState** if true, part CSS file download finish
		monitorState: false,  //Warning: This Variable has been DEPRECATED. Relying on this feature is highly discouraged. Set the current active configuration setting of 'socketState'
		reWFAID: [] //!+ **reWFAID** replay ID
	});
})(dynaGWS);
