/*!

# Require
+ Version: 0.2.0.0
+ Copyright Â© 2011 [DynaComware](http://www.dynacw.com/). All rights reserved.
+ Date: *Tue Apr 16 2013 08:30:00 GMT+0800 (Central Standard Time)*

****************************************************************************************************/
(function(a){
	var Func=function(){
		var d=function(){
			return new d.fn.init();
		}
		d.fn=d.prototype={
			constructor: d,
			name: 'Require',
			version: '0.2.0.5',
			init: function(){
				return this;
			}
		}
		d.fn.init.prototype=d.fn;
		d={
			file: {}, //Success Load File
			setting: {
				level: 1
			},
			scheduling: null,
			index: 0,
			GetDomain: function(){
				var path=d.PathAnalysis();
				return path['domain'];
			},
			PathAnalysis: function(){
				var require=document.getElementById('dynaGWS_require') || document.getElementById('dynaWFS_require');
				var src=require.attributes['src'].value;
				var reg={
					'url': '^((http(s)?:)?\/\/.*\/(gws)?(wfs)?\/)',
					'absolute': '^(\/.*?(gws)?(wfs)?\/)',
					'relative': ''
				}
				for(var i in reg){
					if(!reg.hasOwnProperty(i)) continue;		
					var r=new RegExp(reg[i], 'i');
					var m=src.match(r);
					if(m){
						m[0]=m[0].replace('/wfs/', '/gws/');
						return {
							'type': i,
							'domain': m[0]
						};
						break;
					}
				}
			},
			GetOS: function(){
				var os=(navigator.appVersion).toUpperCase();
				var type={
					'WINDOWS': [
						{'WIN16' : 'WINDOWS 3.11'},
						{'WINDOWS 95' : 'WINDOWS 95'},
						{'WIN95' : 'WINDOWS 95'},
						{'WINDOWS_95' : 'WINDOWS 95'},
						{'WINDOWS 98' : 'WINDOWS 98'},
						{'WIN98' : 'WINDOWS 98'},
						{'WINDOWS NT 5.0' : 'WINDOWS 2000'},
						{'WINDOWS 2000' : 'WINDOWS 2000'},
						{'WINDOWS NT 5.1' : 'WINDOWS XP'},
						{'WINDOWS XP' : 'WINDOWS XP'},
						{'WINDOWS NT 5.2' : 'WINDOWS SERVER 2003'},
						{'WINDOWS NT 6.0' : 'WINDOWS VISTA'},
						{'WINDOWS NT 6.1' : 'WINDOWS 7'},
						{'WINDOWS NT 4.0|' : 'WINDOWS NT 4.0'},
						{'WINNT4.0' : 'WINDOWS NT 4.0'},
						{'WINNT' : 'WINDOWS NT 4.0'},
						{'WINDOWS NT' : 'WINDOWS NT 4.0'},
						{'WINDOWS ME' : 'WINDOWS ME'}
					],
					'OTHER': [
						{'OPENBSD' : 'OPEN BSD'},
						{'SUNOS' : 'SUN OS'},
						{'LINUX' : 'LINUX'},
						{'X11' : 'LINUX'},
						{'MAC_POWERPC' : 'MAC OS'},
						{'MACINTOSH' : 'MAC OS'},
						{'QNX' : 'QNX'},
						{'BEOS' : 'BEOS'},
						{'OS/2' : 'OS/2'},
						{'NUHK' : 'SEARCH BOT'},
						{'GOOGLEBOT' : 'SEARCH BOT'},
						{'YAMMYBOT' : 'SEARCH BOT'},
						{'OPENBOT' : 'SEARCH BOT'},
						{'SLURP' : 'SEARCH BOT'},
						{'MSNBOT' : 'SEARCH BOT'},
						{'ASK JEEVES/TEOMA' : 'SEARCH BOT'},
						{'IA_ARCHIVER' : 'SEARCH BOT'}
					]
				}
				for(var i in type){
					if(!type.hasOwnProperty(i)) continue;		
					for(var j=0; j < type[i].length; j++){
						if(typeof(type[i][j]) === 'object'){
							for(var k in type[i][j]){
								if(!(type[i][j]).hasOwnProperty(k)) continue;
								if(os.indexOf(k) >= 0){
									return {'devices': i, 'os': type[i][j][k]};
									break;
								}
							}
						} else{
							if(os.indexOf(type[i][j]) >= 0){
								return {'devices': i, 'os': type[i][j]};
								break;
							}
						}
					}
				}
				return 'OTHER';
				/*
				function GetOS() {
					windows=(navigator.userAgent.indexOf('Windows',0) != -1)?1:0;
					mac=(navigator.userAgent.indexOf('mac',0) != -1)?1:0;
					linux=(navigator.userAgent.indexOf('Linux',0) != -1)?1:0;
					unix=(navigator.userAgent.indexOf('X11',0) != -1)?1:0;
					if (windows) return 'Windows';
					else if(mac) return 'Apple mac';
					else if(linux) return 'Lunix';
					else if(unix) return 'Unix';
					else return 'undefined'
				}
				var os=GetOS();
				if(os == 'Windows'){
					var isWin98, isWin2000, isWinXP;
					var userAgent=navigator.userAgent;
					isWin98=userAgent.indexOf('Win98') > -1 || userAgent.indexOf('Windows 98') > -1; // win98
					isWin2000=userAgent.indexOf('Windows NT 5.0') > -1 || userAgent.indexOf('Windows 2000') > -1; //win2000
					isWinXP=userAgent.indexOf('Windows NT 5.1') > -1 || userAgent.indexOf('Windows Xp') > -1; //winxp
					if(isWin98) return 'Windows 98'
					else if(isWin98) return 'Windows 2000'
					else if(isWinXP) return 'Windows XP'
					else return 'Windows'
				} else{
					return os;
				}
				*/
			},			
			GetBrowser: function(){
				var client=(navigator.userAgent).toUpperCase();
				var type={
					'MOBILE': [
					'IPHONE', 'IPAD', 'IPOD', 'SYMBIANOS', 'ANDROID',
					'BLACKBERRY', 'SAMSUNG', 'NOKIA', 'WINDOWS CE', 'SONYERICSSON',
					'WEBOS', 'WAP', 'MOTOR', 'SYMBIAN'
					],
					'DESKTOP': [
					{'RV:11.0':'IE11'}, {'MSIE 10.0':'IE10'}, {'MSIE 9.0':'IE9'}, {'MSIE 8.0':'IE8'}, {'MSIE 7.0':'IE7'}, {'MSIE 6.0':'IE6'}, 'FIREFOX', 'CHROME', 'OPERA', 'SAFARI'
					]
				}
				for(var i in type){
					if(!type.hasOwnProperty(i)) continue;		
					for(var j=0; j < type[i].length; j++){
						if(typeof(type[i][j]) === 'object'){
							for(var k in type[i][j]){
								if(!(type[i][j]).hasOwnProperty(k)) continue;
								if(client.indexOf(k) >= 0){
									return {'devices': i, 'browser': type[i][j][k]};
									break;
								}
							}
						} else{
							if(client.indexOf(type[i][j]) >= 0){
								return {'devices': i, 'browser': type[i][j]};
								break;
							}
						}
					}
				}
				return 'OTHER';
			},
			GetRandom: function(min, max){
				//!+ **GetRandom(min, max)**
				//!  + description: get a number between min and max
				return Math.floor(Math.random()*(max-min+1)+min);
			},
			CreateScript: function(url, where, async, Callback){
				//!+ **CreateScript(min, max)**
				var script;
				var head=document.getElementsByTagName('head')[0];
				var body=document.getElementsByTagName('body')[0];
				async=async ? async : false;
				script=document.createElement('script');
				script.type='text/javascript';
				script.charset='utf-8';
				script.async=async;
				script.src=url;
				if(script.readyState){ // for IE
					script.onreadystatechange=function(){
						if(/loaded|complete/i.test(script.readyState)) {
							script.onreadystatechange=null;
							if(typeof(Callback) === 'function') Callback();
						}
					}
				} else{ // others browser
					script.onload=function(){
							if(typeof(Callback) === 'function') Callback();
					}
				}	

				if(where == 'head'){
					head ? head.appendChild(script) || head.insertBefore(script, head.firstChild) : body.appendChild(script) || body.insertBefore(script, body.firstChild);
				} else {
					body ? body.appendChild(script) || body.insertBefore(script, body.firstChild) : head.appendChild(script) || head.insertBefore(script, head.firstChild);
				}

			},
			ReadyGo: function(Callback, certificate, speed, limit){
				var readyGo;	
				var count=0;
				var ReadyGo=function(){
					clearTimeout(readyGo);
					var carnet;
					if(typeof(certificate) === 'string'){
						carnet=eval('typeof('+certificate+') != "undefined"');
					} else if(typeof(certificate) === 'function'){
						carnet=certificate();
					} else{
						carnet=certificate;
					}
					if(count > limit || carnet == true){
						// If Count > Limit or Certificate is True.
						Callback();
					} else{
						readyGo=setTimeout(ReadyGo, speed);
						count++;
					}
				}
				certificate=certificate ? certificate : true;
				speed=speed ? speed : 300;
				limit=limit ? limit : 1000;	
				ReadyGo();
			},
			isFinish: function(){
				for(var i=0; i < d.scheduling.length; i++){
					if(d.scheduling[i]['enable'] == true){
						var name=d.scheduling[i]['name'] ? d.scheduling[i]['name'] : d.scheduling[i]['filename'];
						d.Log(i+':'+name);
						if(name != 'gws.config.js' && d.file[name] != true){
							return false;
						}
					}
				}
				return true;
			},
			Log: function(str){
				if(typeof(str) === 'array') str=str.join('\n');
				if(dynaSetting.require['isDebug'] === false){
					return;
				} else if(dynaSetting.require['isDebug'] == 'console' && window.console){
					console.log(str);
				} else if(dynaSetting.require['isDebug'] == 'alert'){
					alert(str);
				}
			},
			Load: function(){
				//!+ **Load(min, max)**
				var path, setting, self;
				var arg=arguments[0];	
				var userAgent=d.GetBrowser();
				var browser=userAgent.browser;
				var devices=userAgent.devices;
				if(arg != d.scheduling){
					if(d.scheduling == null){
						d.scheduling=arg;
					} else{
						d.scheduling.splice.apply(d.scheduling, [d.index, 0].concat(arg));
					}
				}
				self=d.scheduling[d.index];
				d.index++;
				if(!self) return;
				setting={
					name: self.name ? self.name : self.filename,
					path: self.path ? d.GetDomain()+self.path : d.GetDomain(),
					browser: self.browser ? self.browser : true,
					where: self.where ? self.where : 'head',
					cache: self.cache ? self.cache : true,
					filename: self.filename,
					limit: self.limit ? self.limit : 1000,
					async: self.async ? self.async : true,
					before: self.before ? self.before : true,
					after: self.after ? self.after : true,
					speed: self.speed ? self.speed : 300,
					level: self.level ?	self.level : 1,
					lang: self.lang ? self.lang : null
				}
				setting.filename=setting.cache ? setting.filename+'?r='+d.GetRandom(1, 1000) : setting.filename;
				var Callback=function(){
					if(typeof(self.Callback) === 'function') self.Callback();
					if(d.index != d.scheduling.length){
						if(d.scheduling.length > 0) d.Load(d.scheduling);
					}
				}
				var Start=function(){
					if((typeof(self.browser) === 'undefined' || self.browser === browser) && setting.level <= dynaSetting.require.level && (setting.lang == null || setting.lang == dynaSetting.gws.user.lang)){
						d.scheduling[d.index-1]['enable']=true;
						d.CreateScript(setting.path+setting.filename, setting.where, setting.async, function(){
							d.ReadyGo(Callback, setting.after, setting.speed, setting.limit);
							 d.file[setting.name]=true;
						});
					} else{
						d.scheduling[d.index-1]['enable']=false;
						d.ReadyGo(Callback, true, setting.speed, setting.limit);
					}
				}
				d.Log(setting.filename);
				d.ReadyGo(Start, setting.before, setting.speed, setting.limit);
			}			
		}
		var StartConfig=function(){
			var url=require.attributes['data-config'] ? require.attributes['data-config'].value : d.GetDomain()+'lib/js/gws.require.config.js';
			d.CreateScript(url);
		}
		var require=document.getElementById('dynaGWS_require') || document.getElementById('dynaWFS_require');
		var url=require.attributes['data-setting'] ? require.attributes['data-setting'].value : d.GetDomain()+'lib/js/gws.setting.js';
		d.CreateScript(url, null, null, StartConfig);
		return d;
	}();
    a.DynaRequire=Func; //Warning: This function has been DEPRECATED. Relying on this feature is highly discouraged.
    a.dynaRequire=Func;
    return this;
})(window);