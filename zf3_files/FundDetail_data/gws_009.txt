(function(d) {
	//!## GWS
	//!### Basic Function
	d.extend({
		TriggerEvent: function(el,eventName){
			var htmlEvents = {// list of real events
				//<body> and <frameset> Events
				onload:1,
				onunload:1,
				//Form Events
				onblur:1,
				onchange:1,
				onfocus:1,
				onreset:1,
				onselect:1,
				onsubmit:1,
				//Image Events
				onabort:1,
				//Keyboard Events
				onkeydown:1,
				onkeypress:1,
				onkeyup:1,
				//Mouse Events
				onclick:1,
				ondblclick:1,
				onmousedown:1,
				onmousemove:1,
				onmouseout:1,
				onmouseover:1,
				onmouseup:1
			}
			var event;
			if (typeof window.CustomEvent === 'function') {
				event = new CustomEvent(eventName);
			} else if (document.createEvent) {
				event = document.createEvent('HTMLEvents');
				event.initEvent(eventName,true,true);
				}else if(document.createEventObject){// IE < 9
					event = document.createEventObject();
					event.eventType = eventName;
				}
				event.eventName = eventName;
				if(el.dispatchEvent){
					el.dispatchEvent(event);
				}else if(el.fireEvent && htmlEvents['on'+eventName]){// IE < 9
					el.fireEvent('on'+event.eventType,event);// can trigger only a real event (e.g. 'click')
				}else if(el[eventName]){
					el[eventName]();
				}else if(el['on'+eventName]){
					el['on'+eventName]();
				}
			},
		PreventDefault: function( event, whitelist ) {
			//!+ ** PreventDefault( event, whitelist ) **
			//! + description: none
			//! + parameters: ** event **, ** whitelist **
			var e = event || window.event,
				key = d.GetKeyCode(e),
				isWhiteList = false;
			if ( whitelist != null ) {
				for ( var i = 0; i < whitelist.length; i++ ) {
					if ( key == whitelist[i] ) isWhiteList = true;
				}
				if ( isWhiteList == false ){
					if ( e && e.preventDefault ) e.preventDefault();
					else if ( window.event ) window.event.returnValue = false;
				}
			} else {
				if ( e && e.preventDefault ) e.preventDefault();
				else if ( window.event ) window.event.returnValue = false;
			}
		},
		ObjectKeys: function(){
			return Object.keys || (function(){
				var hasOwnProperty=Object.prototype.hasOwnProperty;
				var hasDontEnumBug=!{toString:null}.propertyIsEnumerable('toString');
				var dontEnums=[
				'toString',
				'toLocaleString',
				'valueOf',
				'hasOwnProperty',
				'isPrototypeOf',
				'propertyIsEnumerable',
				'constructor'
				],
				dontEnumsLength=dontEnums.length;
				return function(o){
					if(typeof o != 'object' && typeof o != 'function' || o === null)
						throw new TypeError('Object.keys called on a non-object');
					var result=[];
					for(var name in o){
						if((d.user.prototypeDebug == true) && (!o.hasOwnProperty(name))) continue;
						if(hasOwnProperty.call(o, name))
							result.push(name);
					}
					if(hasDontEnumBug){
						for(var i=0; i < dontEnumsLength; i++) {
							if(hasOwnProperty.call(o, dontEnums[i]))
								result.push(dontEnums[i]);
						}   
					}
					return result;
				};
			})();
		},
		GetObjectSize: function(obj){
			var size=0;
			for(var key in obj){
				if(d.user.prototypeDebug == true && !obj.hasOwnProperty(key)) continue;
				if(obj.hasOwnProperty(key)) size++;
			}
			return size;
		},
		GetKeyCode: function(event){
			//!+ **GetKeyCode(event)**
			//! + description: get ASCII keyCode
			return Number(window.event ? event.keyCode : ( event ? event.which : 0 ) );
		},
		GetForm: function(elem){
			var Main=function(parent, arr){
				if(typeof(parent) == 'undefined') return;
				parent=typeof(parent.length) != 'undefined' ? parent : [parent];
				for(var i=0; i < parent.length; i++){
					child=parent[i];
					if(typeof(child) === 'undefined') continue;
					if(child.nodeType === 3){
					} else if(((child.nodeName).toUpperCase() == 'INPUT' && ((child.type).toUpperCase() == 'TEXT' || (child.type).toUpperCase() == 'BUTTON')) || ((child.nodeName).toUpperCase() == 'TEXTAREA')){				
						arr.push(child);
					} else if((child.nodeName).toUpperCase() != 'SCRIPT'){
						arr=Main(child.childNodes, arr);
					}
				}
				return arr;
			}
			return Main(elem, []);
		},
		GetResponseText: function(xhr, Callback){
			xhr.send();
			if(typeof(Callback) === 'function'){
				xhr.onload=xhr.onreadystatechange=function() {
					if(document.dispatchEvent || /loaded|complete/i.test(xhr.readyState)){
						Callback(xhr.responseText);
						this.onload=this.onreadystatechange=null;						
					}
				}
			} else{
				if(async == false){
					return xhr.responseText;
				}
				else{
					xhr.onreadystatechange=function(){
						if(xhr.readyState == 4){
							if(xhr.status == 200) return xhr.responseText;
						}
					}	
				}
			}
		},
		CreateXmlHttpRequest: function(){
			//!+ **CreateXmlHttpRequest()**
			//!  + description: create xml http request
			if(window.ActiveXObject){
				try{return new ActiveXObject('Msxml2.XMLHTTP');}
				catch(e){
					try{return new ActiveXObject('Microsoft.XMLHTTP');}
					catch(E){return null;}
				}
			}
			else if(window.XMLHttpRequest) return new XMLHttpRequest();
			　　else return 'null';
		},
		SendXmlHttpRequest: function(url, method, async, data, Callback){
			//!+ **SendXmlHttpRequest(url, method, async, data)**
			//!  + description: send xml http request
			var xhr=d.CreateXmlHttpRequest();
			xhr.open(method, url, async);
			xhr.send(data);
			if(typeof(Callback) === 'function'){
				xhr.onreadystatechange=function(){
					if(xhr.readyState == 4){
						if(xhr.status == 200) Callback(xhr);
					}
				}
			}
			return xhr;
		},	
		DeleteDuplicates: function(arr){
			//!+ **DeleteDuplicates(arr)**	
			//! + description: remove duplicate values from an array
			//! + parameters: **arr**
			var i, j, cur, found;
			for(i=arr.length-1; i >= 0; i--){
				cur=arr[i];
				found=false;
				for(j=i-1; !found && j >= 0; j--){
					if(cur === arr[j]){
						if(i !== j){
							arr.splice(i, 1);
						}
						found=true;
					}
				}
			}
			return arr;
		},
		DeleteEmpty: function(arr){
			//!+ **DeleteEmpty(obj, type, func)**
			//!  + description: remove null value in array
			var arr2=[];
			for(var i in arr){
				if(d.user.prototypeDebug == true && !arr.hasOwnProperty(i)) continue;
				if(arr[i]) arr2.push(arr[i]); 
			}	
			return arr2;
		},
		CreateClass: function(target, classValue) {
			//!+ **CreateClass(target, classValue)**
			//!  + description: add class in object
			if(typeof(target) === 'undefined') return;
			var pattern=new RegExp('(^| )'+classValue+'( |$)');
			if(!pattern.test(target.className)){
				if(target.className == '')
					target.className=classValue;
				else
					target.className += ' '+classValue;	
			}
			return true;
		},
		DeleteClass: function(target, classValue, type){
			//!+ **DeleteClass(target, classValue)**
			//!  + description: remove class in object
			if(target == null) return;
			var removedClass=target.className;
			if(type == 'fuzzy'){
				var pattern=new RegExp('(^| )'+classValue+'.*?'+'( |$)');
			} else{
				var pattern=new RegExp('(^| )'+classValue+'( |$)');
			}
			removedClass=removedClass.replace(pattern, '$1');
			removedClass=removedClass.replace(/ $/, '');
			target.className=removedClass;
			return true;
		},	
		GetClass: function(target, classValue, type) {
			//!+ **GetClass(target, classValue)**
			//!  + description: get class in object
			if(!target) return;
			var getClass=target.className;
			if(type == 'fuzzy'){
				var pattern=new RegExp(classValue);
			} else{
				var pattern=new RegExp('(^| )'+classValue+'( |$)');
			}
			if(getClass.match(pattern)) return true;
			else return false;
		},
		DOM: function(elem, type){
			type=type ? type : null;
			if(type == 'id' || elem.indexOf('#') == 0){
				elem=elem.replace('#', '');
				return document.getElementById(elem);
			} else if(type == 'class' || elem.indexOf('.') == 0){
				elem=elem.replace('.', '');
				if(!document.getElementsByClassName || (d.user.prototypeDebug == true && (d.glob.browser == 'IE8' || d.glob.browser == 'IE7'))){
					var indexOf=[].indexOf||function(prop){
						for(var i = 0; i < this.length; i++){
							if(this[i] === prop) return i;
						}
						return -1;
					}
					getElementsByClassName=function(className, context){
						var elems=document.querySelectorAll ? context.querySelectorAll("." + className) : (function(){
							var all=context.getElementsByTagName("*"),
							elements=[],
							i=0;
							for(; i < all.length; i++){
								if(all[i].className && (" " + all[i].className + " ").indexOf(" " + className + " ") > -1 && indexOf.call(elements,all[i]) === -1) elements.push(all[i]);
							}
							return elements;
						})();
						return elems;
					}
					return getElementsByClassName(elem, document);
				} else{
					return document.getElementsByClassName(elem)
				}
			} else {
				if(document.getElementsByTagName(elem).length < 2){
					return document.getElementsByTagName(elem)[0]
				} else{
					return document.getElementsByTagName(elem)
				}
			}
		},
		Trim: function(){
			//!+ **Trim(str)**
			//!  + description: clear str trim
			return arguments[0].replace(/^\s*|\s*$/g, '');
		},
		Offset: function(self){
			//!+ **offset()**
			//! + parameters: **obj**,
			self=self ? self : this;
			var x=self.offsetLeft;
			var y=self.offsetTop; 
			try{ // for IE8
				while(self = self.offsetParent){
					x+=self.offsetLeft;
					y+=self.offsetTop;
				}
			} catch(e){ // for Other
				x=0;
				y=0;
			}
			return { left: x, top: y };
		},
		IsEmptyObject: function(obj){
			//!+ **IsEmptyObject(obj)**	
			//! + description: returning true on a empty object
			//! + parameters: **obj** DOM
			for(var i in obj){
				if(typeof(d) != undefined && d.user.prototypeDebug == true && !obj.hasOwnProperty(i)) continue;				
				return false;
			}
			return true;
		},
		GetCaret: function(elem){
			//!+ **GetCaret(elem)**
			//! + description: get cursor index
			var start, end, range;
			if(document.all){
				if(elem.nodeName.toUpperCase() == 'INPUT'){
					if(elem.type != 'text') return 0;
					elem.focus();
					range = document.selection.createRange();
					range.setEndPoint( "StartToStart", elem.createTextRange() );
					start = range.text.length;
				} else{
					elem.focus();
					range = document.selection.createRange();
					range_all = document.body.createTextRange();
					range_all.moveToElementText( elem );
					text = range.text;
					for ( var i = 0; range_all.compareEndPoints( "StartToStart", range ) < 0 && range.moveStart( "character", -1 ) !== 0; ) {
						i++;
					}
					start = i;

				}		
			} else{
				start=elem.selectionStart;
				end=elem.selectionEnd;
			}
			return {start: start, end: end};
		},
		SetCaret: function(caret, target){
			//!+ **SetCaret(caret)**	
			//! + description: set caret position when target object now
			//! + parameters: **caret** caret position
			if ( target == null ) return;
			if(document.all){
				var e=target.createTextRange();
				e.collapse(true);
				e.moveStart('character', caret);
				e.collapse(false);
				e.select();
			} else{
				target.selectionStart=caret;
				target.selectionEnd=caret;
			}
		},
		QuerySelector: function(str){
			//!+ **QuerySelectorAll(str)**	
			//  + description: querySelectorAll Browser compatibility
			//! + parameters: **str**,
			if(document.querySelector) return document.querySelector(str);
			else if(document.querySelectorAll) return document.querySelectorAll(str);
			else{
				// IE7
				var s=document.createStyleSheet();
				document.querySelectorAll=function(r, c, i, j, a) {
					var a=document.all, c=[], r = r.replace(/\[for\b/gi, '[htmlFor').split(',');
					for(var i=r.length; i--;) {
						s.addRule(r[i], 'k:v');
						for(var j=a.length; j--;) a[j].currentStyle.k && c.push(a[j]);
							s.removeRule(0);
					}
					return c;
				}
				return document.querySelectorAll(str);				
			}
		},
		CreateElement: function(){
			//!+ **CreateElement()**	
			//!  + description: create object
			if(!arguments[0]) return;
			var wrap=document.createElement('div');
			var fragment=document.createDocumentFragment();
			wrap.innerHTML=arguments[0];
			for(var node=wrap.firstChild,temp=node.nextSibling; node;){
				fragment.appendChild(node);
				node=temp;
				temp=node ? node.nextSibling : null;
			}
			wrap=null;
			return fragment;
		},
		ReplaceWith: function(elem, str){
			//!+ **ReplaceWith(obj, str)**	
			//!  + description: replace browser compatibility
			if(!str) return;
			if(typeof(str) === 'object'){
				elem.parentNode.replaceChild(str, elem);
				return elem;
			}else if(typeof(str) === 'string'){
				var newElem=d.CreateElement(str);
				if(elem.parentNode == null) return;
				elem.parentNode.insertBefore(newElem, elem);
				elem.parentNode.removeChild(elem);
				return elem;
			}
		},
		InsertScript: function(type, url, id){
			//!+ **InsertScript(url, id, type)**
			//!  + description: add script dom in HTML
			var elem;
			var head=document.head || document.getElementsByTagName('head')[0] || document.getElementsByTagName('head').item(0);
			if(type == 'javascript'){
				d.DeleteNode(id, 'head');
				elem=document.createElement('script');
				elem.type='text/javascript';
				elem.setAttribute('src', url);
				id != null ? elem.setAttribute('id', id) : '';
				head.appendChild(elem);
			}
			if(type == 'css'){
				var style=document.getElementById(id.toString()+'style');
				if(style){
					d.DeleteNode(id.toString()+'style', 'head');
				}
				if(document.getElementById(id)){
					elem=document.getElementById(id);
					if(elem.getAttribute('href') != url){
						if(d.glob['browser'] == 'IE9' || d.glob['browser'] == 'IE8'){
							elem.type=''; //IE need reset type
							elem.setAttribute('href', url);
							elem.type='text/css';								
						} else{
							elem.setAttribute('href', url);
						}
					}
				} else{
					elem=document.createElement('link');
					elem.type='text/css';
					elem.setAttribute('href', url);
					elem.setAttribute('media', 'all');
					elem.setAttribute('rel', 'stylesheet');
					id != null ? elem.setAttribute('id', id) : '';
					head.appendChild(elem);	
					if(d.glob['browser'] == 'IE8' || d.glob['browser'] == 'IE7' || d.glob['browser'] == 'IE6'){
						elem.type=''; //IE need reset type
						elem.setAttribute('href', url);
						elem.type='text/css';								
					}
				}
			}
			return elem;
		},
		DeleteNode: function(id, where){
			//!+ **DeleteNode(id, where)**
			//!  + description: add script dom in HTML
			var elem=document.getElementById(id);
			if(elem){
				if(where == 'head'){
					var parent=document.getElementsByTagName('head')[0];
				} else if(where == 'body'){
					var parent=document.getElementsByTagName('body')[0];
				}
				parent.removeChild(elem);
			}
		},
		CanListen: function(elem, classes){
			if(elem == null) return false;
			classes=classes ? classes : d.user.noListenClass;	
			var mismatch=false;		
			if(typeof(elem.className) !== 'undefined'){
				for(var i=0; i < classes.length; i++){
					if(elem.className.search(classes[i]) >= 0){
						mismatch=true;
					}
				}
				if(mismatch) return false;
			}
			return true;
		},
		ClearRandom: function(str){
			str=str.replace(/-\d+$/gi, '');
			return str;
		},
		CreateEvent: function(obj, type, func){  
			//!+ **CreateEvent(obj, type, func)**
			//!  + description: add event listener
			if(obj == null) return;
			if(window.attachEvent){
				obj=obj == window ? document : obj;
				obj.attachEvent('on'+type, function(){func.apply(obj, arguments)}); //for IE5-10
			} else obj.addEventListener(type, func, false); //for other and IE11
		},
		DeleteEvent: function(obj, type, func){  
			//!+ **DeleteEvent(obj, type, func)**
			//!  + description: remove event listener
			if(obj == null) return;
			if(window.detachEvent){
				obj=obj == window ? document : obj;
				obj.detachEvent('on'+type, function(){func.apply(obj, arguments)}); //IE
			} else obj.removeEventListener(type, func, false); //other
		}
	});
	//!### API
	d.extend({
		SetFontFaceAll: function(code){
			d.user.code={
				'wfa': code,
				'wime': code,
				'ppwime': code
			}
			d.StartGWS();
		},
		Replay: function(){	
			// warning: this function has been DEPRECATED. Relying on this feature is highly discouraged.
			if(typeof(event) != 'undefined'){
				d.PreventDefault(event);
			}
			if(d.glob['state'] !== 'Finish') return;
			d.StartGWS();
		},
		replay: function(){	
			// warning: this function has been DEPRECATED. Relying on this feature is highly discouraged.
			if(typeof(event) != 'undefined'){
				d.PreventDefault(event);
			}
			if(d.glob['state'] !== 'Finish') return;
			d.StartGWS();
		}
	});	
	//!### Sub Function
	d.extend({
		Log: function(str, level){
			//!+ **Log(str)**	
			//! + description: show str when console is exitst and user.isDebug is true
			//! + parameters: **str** show word
			if(typeof(str) === 'array') str=str.join('\n');
			level=level ? level : 1;
			if((d.user['isDebug'] === false) || (d.user.logLevel < level)){
				return;
			} else if(d.user['isDebug'] == 'console' && window.console){
				console.log(str);
			} else if(d.user['isDebug'] == 'alert'){
				alert(str);
			}
		},
		SetMirrorsPosition: function(){
			//!+ **SetMirrorsPosition()**			
			//! + description: set object position by WIME or PPWIME
			//! + parameters: **node**, **top**, **left**, **align**, **pos**, **obj**
			var data=arguments[0];
			for(var i=0; i < data['elem'].length; i++){
				if(data['target'] == undefined || data['elem'][i] == undefined) return;
				var elem=data['elem'][i];
				switch(data['align']){
					case 'body':
						switch(data['position']){
							case 'top-left':
								elem.style.top=0+data['top']+'px';
								elem.style.left=0+data['left']+'px';
								break;
							case 'top-right':
								elem.style.top=0+data['top']+'px';
								elem.style.right=0+data['left']+'px';	
								break;
							case 'bottom-left':
								elem.style.bottom=0+data['top']+'px';
								elem.style.left=0+data['left']+'px';	
								break;
							case 'bottom-right':
								elem.style.bottom=0+data['top']+'px';
								elem.style.right=0+data['left']+'px';
								break;
						}
						elem.style.position='fixed';
						break;
					case 'target':
						var target={
							left: d.GetPos(data['target'], 'X'),
							top: d.GetPos(data['target'], 'Y'),
							width: data['target'].offsetWidth,
							height: data['target'].offsetHeight
						}
						var elem2={
							top: null,
							left: null,
							width: elem.offsetWidth,
							height: elem.offsetHeight
						}
						switch(data['position']){
							case 'top-left':
								elem2={
									top: target.top-elem2.height,
									left: target.left
								}
								break;
							case 'top-right':
								elem2={
									top: target.top-elem2.height,
									left: target.left+target.width-elem2.width
								}
								break;
							case 'bottom-left':
								elem2={
									top: target.top+target.height,
									left: target.left
								}
								break;
							case 'bottom-right':
								elem2={
									top: target.top+target.height,
									left: target.left+target.width-elem2.width
								}
								break;
						}
						elem.style.position='absolute';	
						elem.style.top=elem2.top+data['top']+'px';
						elem.style.left=elem2.left+data['left']+'px';
						d.Log(' + Position: '+elem.id+' Abs: '+elem.style.top+', '+elem.style.left, 2);
						break;
				}
			}
		},
		CreateMuchEvent: function(){
			//!+ **CreateMuchEvent()**
			//! + description: create event 
			//! + parameters: **node**	
			var data=arguments[0];
			if(data['node'])
				var elems=data['node'];
			else
				return;
			for(var i in data){
				if(d.user.prototypeDebug == true && !data.hasOwnProperty(i)) continue;
				if(i === 'node') continue;
				for(var j=0; j < elems.length; j++){
					var elem=typeof(elems[j]) === 'string' ? d.DOM(elems[j]): elems[j];
					if((Object.prototype.toString.call(elem) === '[object]') || (Object.prototype.toString.call(elem) === '[object Array]') || (Object.prototype.toString.call(elem) === '[object NodeList]') || (Object.prototype.toString.call(elem) === '[object HTMLCollection]') || (Object.prototype.toString.call(elem) === '[object Object]')){	
						if(elem.length > 0){
							for(var k=0; k < elem.length; k++){
								if(data[i] && d.CanListen(elem[k])) d.CreateEvent(elem[k], i, data[i]);
							}
						} else{
							if(data[i] && d.CanListen(elem)) d.CreateEvent(elem, i, data[i]);
						}
					} else{
						if(data[i] && d.CanListen(elem)) d.CreateEvent(elem, i, data[i]);
					}
				}
			}
			return false;
		},
		DeleteMuchEvent: function(){
			// Remove Event // 
			var data=arguments[0];
			if(data['node'])
				var elems=data['node'];
			else
				return
			for(var i in Object.ownKeys(data)){
				if(d.user.prototypeDebug == true && !data.hasOwnProperty(i)) continue;
				if(i === 'node') continue;
				for(var j=0; j < elems.length; j++){
					var elem=typeof(elems[j]) === 'string' ? d.DOM(elems[j]): elems[j];
					if((Object.prototype.toString.call(elem) === '[object]') || (Object.prototype.toString.call(elem) === '[object Array]') || (Object.prototype.toString.call(elem) === '[object NodeList]') || (Object.prototype.toString.call(elem) === '[object HTMLCollection]') || (Object.prototype.toString.call(elem) === '[object Object]')){	
							for(var k=0; k < elem.length; k++){
							if(elem.length > 0){
								for(var k=0; k < elem.length; k++){
									if(data[i] && d.CanListen(elem[k])) d.DeleteEvent(elem[k], i, data[i]);
								}
							} else{
								if(data[i] &&　d.CanListen(elem)) d.DeleteEvent(elem[k], i, data[i]);
							}
						}
					} else{
						if(data[i] && d.CanListen(elem)) d.DeleteEvent(elem, i, data[i]);
					}
				}
			}
			return false;
		},
		GetIME: function(target, className){
			var classVal=target.className;
			var reg=new RegExp('(^| )'+className+'(.*?)( |$)');
			return classVal.match(reg) ? classVal.match(reg)[2] : false;
		},
		SetFontFace: function(){  
			var setting=arguments[0];
			if(!setting['target']) return;
				if(typeof(setting['target'].length) == 'undefined'){
					setting['target'].style.fontFamily=setting['fontface'];
				}
			for(var i=0; i < setting['target'].length; i++){
				if(typeof(setting['target'][i]) !== 'object') continue;
				setting['target'][i].style.fontFamily=setting['fontface'];
			}				
		},
		Rename: function(type, name){
			switch(type){
				case 'temp':
					return d.user.sign['dcw']+d.user.sign['temp']+name;
					break;
			}
		},
		SetState: function(state, elem){
			elem=elem ? elem : document.getElementById(d.user['stateID']);
			d.glob['state']=state;
			d.glob.stateLog.push(d.glob['state']);
			if(elem){
				elem.innerHTML=d.glob['state'];
			}
		},
		SetTemplate: function(type, id){
			//!+ **SetTemplate(id, type)**
			var elem=document.getElementById(d.user.sign['dcw']+d.user.sign['temp']+id)||'';
			var temp;
			if(document.getElementById('dcw-temp')){
				temp=document.getElementById('dcw-temp');
			} else{
				temp=document.createElement('div');	
				temp.id='dcw-temp';
				document.body.appendChild(temp);
			}
			switch(type){
				case 'add':
					if(!elem){ // create template when that isn't exist
						elem=document.createElement('div');									
						elem.id=d.user.sign['dcw']+d.user.sign['temp']+id;
						temp.appendChild(elem);
					}
					if(d.glob.target['ime'] && id == d.user.keyboard['id']){
						var html = d.html[d.user.IME[d.user.lang][d.glob.target['ime']]['keyboard']['id']];
						if ( typeof html != "undefined" ) elem.innerHTML=html;
					} else{
						var html = d.html[id];
						if ( typeof html != "undefined" ) elem.innerHTML=html;
					}
					d.CreateClass(elem, d.user.hideClass);
					break;		
				case 'remove':
					if(!elem) return;
					if(d.glob['browser'] == 'IE10' || d.glob['browser'] == 'IE9'){
						elem.outerHTML=''; 
					} else{
						temp.removeChild(elem);
					}
					break;			
				case 'hide':
					if(!d.GetClass(elem, d.user.hideClass)) d.CreateClass(elem, d.user.hideClass)
					break;						
				case 'show':
					if(d.GetClass(elem, d.user.hideClass)) d.DeleteClass(elem, d.user.hideClass)
					break;
				case 'state':
					return elem ? (d.GetClass(elem, d.user.hideClass) ? false : true) : false;
					break;			
			}
			return false;
		},
		Info: function(){
			//!+ **Info()**
			var log=[
			'# GaijiWeb Server Javascript Plugin',
			' + Version: '+d.fn.version,
			' + Path: '+d.glob['url'],
			' + Language: '+d.user.lang,
			' + Full CSS for Web: '+d.user.webFullCSS,
			' + Full CSS for IME: '+d.user.imeFullCSS,
			' + Connect: '+d.user.queryType,
			' + Preprocessor: '+d.user.preprocessor,
			' + Unicode to BIG5: '+d.glob.features['unicode'],
			' + UAO to Gaiji: '+d.glob.features['uao'],
			' + Keyboard: '+d.glob.features['keyboard'],					
			' + Re WFA: '+d.user.reWFA
			];
			console.log(log.join('\n'));
		},
		GetFeatures: function(){
			//!+ **GetFeatures()**
			return {
				json: dynaRequire.file['json'] && d.user.queryType == 'ajax' ? true : false,
				unicode: dynaRequire.file['wfa'] && dynaRequire.file['unicode'] && d.user['lang'] == 'CHT' ? d.GetObjectSize(JSON) > 0 ? d.user.unicode2big5['enable'] : false : false,
				uao: dynaRequire.file['wfa'] && dynaRequire.file['uao'] && d.user['lang'] == 'CHT' ? d.user['uao2gaiji'] : false,				
				wfa: dynaRequire.file['wfa'] ? true : false,
				wime: dynaRequire.file['wime'] ? true : false,
				ppwime: (dynaRequire.file['ppwime'] && d.user.PPWIME['enable']) ? true  :false,	
				keyboard: (dynaRequire.file['wime'] && d.user.keyboard['enable']) ? (d.glob.devices == 'MOBILE' ? d.user.keyboard.mandatory['mobile'] : d.user.keyboard.mandatory['desktop']) : false
			}
		},
		Focus: function(type){
			if ( typeof event != "undefined") d.PreventDefault( event, [ "37", "38", "39", "40" ] );
			if(d.glob.features['keyboard'] === true){
				if(document.getElementById(d.user.WIME['compositionID'])) document.getElementById(d.user.WIME['compositionID']).blur();
			} else{
				if(d.SetTemplate('state', d.user.WIME['id']) == false){
					if ( d.glob.target.elem != null ) {
					d.SetCaret(d.glob.target['caret'], d.glob.target['elem']);
					d.glob.target['elem'].blur();
					d.glob.target['elem'].focus();
					}
				}
			}		
			if(type == 'keyboard'){
				if(d.IsHere('keyboard')){
					document.getElementById(d.user.WIME.composition['id']).blur();
					d.keyboard.Close();
					if(d.glob.features['keyboard']) d.keyboard.Execute();
				} else{
					try{ // for IE8 error
						if(document.getElementById(d.user.WIME.composition['id'])) document.getElementById(d.user.WIME.composition['id']).focus();
					} catch(e){}
				}
			}
		},
		InsertGaiji: function(str, target, code, all){
			//!+ **InsertGaiji(str)**
			//! + description: insert Gaiji at target object
			target=target ? target : d.glob.target['elem'];
			code=code ? code : d.glob.code['wfa'];
			var val=target.value;
			var caret=0;
			str=str.replace(/<.*?>/gi, '');
			if(document.all){ // for IE6 - IE10
				for(var i=0; i < d.glob.target['caret']; i++){
					caret++;
					if(target.value.charAt(i) == '\n'){
						if(d.glob['browser'] == 'IE8' || d.glob['browser'] == 'IE7' || d.glob['browser'] == 'IE6')
							caret++;
					}
				}
			} else{ // other
				caret=d.glob.target['caret'];
			}
			var val2={
				'before': val.substr(0, caret),
				'after': val.substr(caret, target.value.length)
			};
			target.value=val2['before']+str+val2['after'].replace(/^\n/gi, ''); //merge


			d.TriggerEvent( target, "input");
			d.glob.target['caret']++;
			d.SetCaret(d.glob.target['caret'], d.glob.target['elem']);
			d.SetFontFace({target: target, fontface: d.font[code]['fontface']});
			d.CreateClass(target, d.font[code]['fontClass']);
			d.CreateClass(target, d.user.gajisClass);
			d.IsContinue(d.user.continuous);
			if ( typeof d.glob.target['elem'].onchange == "function") {
				d.glob.target['elem'].onchange(); //071116 add
				d.StartWFA();
			} else {
				d.StartWFA({str: str, elem: target, code: code});
			}
			d.Log('Cursor Index: '+d.glob.target['caret'], 2);
		},
		ConnectMDB: function(type, query, Callback){
			//!+ **ConnectMDB(type, query, callback)**
			//! + description: use query connect queryMDB and callback.(WIME or PPWIME)
			d.SetState('Connect MDB');
			if(d.user['queryType'] == 'ajax'){ // Ajax	
				var ReadyGo=function(xhr){
					var data=xhr.responseText;
					if(data){
						data=JSON.parse(data);
						data['gaiji']=data['gaiji'] ? data['gaiji'] : [];
						data['similar']=data['similar'] ? data['similar'] : [];
						if(data['gaiji'].length > 0 || data['similar'].length > 0){ // Have Data
							d.glob.result['gaiji'].length=0;
							d.glob.result['similar'].length=0;
							data['similar']=data['similar'].join('');
							data['similar']=data['similar'].split('');
							for(var i=0; i < data['gaiji'].length; i++){
								d.glob.result['gaiji'][i]=data['gaiji'][i];
							}
							for(var i=0; i < data['similar'].length; i++){
								d.glob.result['similar'][i]=data['similar'][i];
							}
							Callback(d.glob.result);
						} else{ // Not Data
							if(type === 'wime') d.CreateClass(document.getElementById(d.user.WIME['windowID']), d.user.WIME['errorClass']);
							if(type === 'ppwime') Callback(d.glob.result);
							d.Log('Can Not Find Data', 2);
						}	
						d.SetState('Finish');
					} else{
						if(type === 'wime') d.CreateClass(document.getElementById(d.user.WIME['windowID']), d.user.WIME['errorClass'])
						d.Log('Can Not Find Data', 2);
					}
				}
				query['json']=query['json'] ? JSON.stringify(query['json']) : [];
				d.SendXmlHttpRequest(query['url'], 'POST', true, query['json'], ReadyGo);
				d.Log('ConnectMDB: '+query['json'], 1);
			} else{ // Query
				d.InsertScript('javascript', query, d.user.queryMDB['id']);
				d.Log('queryMDB Query: '+query, 1);
				dynaRequire.ReadyGo(
					function(){
						d.glob['queryState']=false;
						d.SetState('Finish');
						if(d.glob.result['gaiji'].length <= 0 && d.glob.result['similar'].length <= 0){
							if(type === 'wime') d.CreateClass(document.getElementById(d.user.WIME['windowID']), d.user.WIME['errorClass']);
							if(type === 'ppwime') Callback(d.glob.result);
							d.Log('We did not find results', 2);
						} else{
							d.glob.result['similar']=d.glob.result['similar'].join('');
							d.glob.result['similar']=d.glob.result['similar'].split('');
							Callback(d.glob.result);
						}
					},
					function(){
						if(d.glob['queryState'] === true){
							return true;
						} else{
							return false;
						}
					}
				);
			}
		},
		IsHere: function(type){
			switch(type){
				case 'keyboard':
					return document.getElementById(d.Rename('temp', d.user.keyboard['id'])) ? true : false;
					break;
				case 'wime':
					return document.getElementById(d.Rename('temp', d.user.WIME['id'])) ? true : false;
					break;
				case 'candidate':
					return document.getElementById(d.Rename('temp', d.user.WIME.candidate['id'])) ? true : false;
					break;
				case 'ppwime':
					return document.getElementById(d.Rename('temp', d.user.PPWIME['id'])) ? true : false;
					break;
			}
			return false
		},
		Close: function(){
			if(d.glob.features['wime'] == true){
				d.keyboard.Close();
				d.candidate.Close();				
				d.wime.Close();
			}
			if(d.glob.features['ppwime'] == true){
				d.ppwime.Close();
			}
			d.trigger.Close();
		},
		GetPosition: function(elem, top ,left){
			var offset=d.Offset(elem);
			return {
				'top': offset['top']+top+'px',
				'left': offset['left']+left+'px'
			}
		},
		Hotkey: function(event, hotkey){
			d.Log('## Hotkey', 3);
			// return
			if(!d.glob.features['wime'] && !d.glob.features['ppwime']) return;
			// init
			var e=event || window.event;
			var target=e.target || e.srcElement;
			var key=d.GetKeyCode(e);
			var imeHotkey=target != 'body' ? (d.glob.features['wime'] ? d.user.IME[d.user['lang']] : {}) : {};
			hotkey=d.extend(true, d.user['hotkey'], hotkey, imeHotkey);
		
			// getting started
			if(e.type == 'keydown'){
				d.Log(' + Press: '+key, 2);
				if(key == 229){
					d.glob['hotkey229']=true;
				} else{
					d.glob['hotkey'].push(key);
				}
			} else if(e.type == 'keyup'){
				if(d.glob['hotkey229'] == true){
					d.glob['hotkey'].push(key);
					d.glob['hotkey229']=false;
				}
				d.glob['hotkey']=d.DeleteDuplicates(d.glob['hotkey']);
				for(var i in hotkey){
					if(d.user.prototypeDebug == true && !hotkey.hasOwnProperty(i)) continue;
					// search all IME
					if(hotkey[i]['enable']){
						// enable is true
						for(var j=0; j<hotkey[i]['hotkey'].length; j++){
							if(hotkey[i]['hotkey'][j] == d.glob['hotkey'][j]){
								if(j+1 == hotkey[i]['hotkey'].length){
									d.Log(' + Hotkey: '+d.glob['hotkey'], 1);
									hotkey[i]['callback']();
								}
								continue;
							} else{
								break;
							}
						}
					}
				}			
				d.glob.hotkey[key]=false;
				d.glob.hotkey.length=0;
			}
		}
	});	
	//!### Main Function
	d.extend({
		Initialize: function(){
			d.glob.features=d.GetFeatures();
			if(d.glob.features['wime'] === true){
				d.user.imeNewCSS['enable']=(d.user.webFullCSS || d.user.imeFullCSS) ? false : d.user.imeNewCSS['enable'];
				d.user.inputFlowCaret=(d.glob.devices == 'MOBILE') ? false : d.user.inputFlowCaret;
			}
			// create new node for css
			d.InsertScript('css', d.glob['url']+d.user.cssPath+d.user.defaultCSS['filename'], d.user.defaultCSS['id']);
			if(d.glob.devices == 'MOBILE') d.InsertScript('css', d.glob['url']+d.user.cssPath+d.user.mobileCSS['filename'], d.user.mobileCSS['id']);
			if(d.glob.features['unicode'] === true) d.mapping['unicode']=d.mapping['unicode'] != null ? d.mapping['unicode'] : (d.user['compatibilityDebug'] ? (typeof(JSON) != 'undefined' ? JSON : d.mapping['unicode']) : d.mapping['unicode']);
			if(dynaRequire.file['json']){
				JSON=dynaJSON;
			}
			if(d.glob.browser == 'FIREFOX' && document.characterSet.toUpperCase() == 'BIG5'){
				if(d.glob.features['uao'] === true){
					var node=d.GetNode('uao', d.DOM('body'));
					var elem=node.elem;
					d.FirefoxUAO(elem);
				}
			}
			d.font=[];
			d.font.length=0;
			delete d.glob.gaiji;
			d.glob.gaiji=[];
			delete d.glob.count;
			d.glob.count={};
			d.SetState('Finish');
			d.StartGWS();
		},
		StartGWS: function(event){
			//!+ **StartGWS()**
			d.SetState('Start GWS');
			for(var i in d.user.font){
				if(d.user.prototypeDebug == true && !d.user['font'].hasOwnProperty(i)) continue;
				d.glob.fullGaiji[i]=d.glob.fullGaiji[i] ? d.glob.fullGaiji[i] : (d.user.webFullCSS ? true : false);
				d.glob.code['wfa']=i;
				d.font[i]={
					fontFN: d.user.font[i]['fontFN'],
					ignore: d.user.font[i]['ignore'],
					fontface: d.glob.fullGaiji[i] ? d.user.font[i]['fontface'] : d.user.font[i]['fontface'],
					fontClass: d.user.sign['dcw']+d.user.sign['font']+d.user.font[i]['fontface']+'CSS',
					fontID: d.user.sign['dcw']+d.user.font[i]['fontface']+'ID',
					mdb: d.user.font[i]['mdb'] ? d.user.font[i]['mdb'] : d.user.font[i]['fontface'],
					range: d.user.font[i]['range'],
					object: i == d.user.code['wfa'] ? (d.user.font[i]['object'] ? d.user.font[i]['object'] : 'body') : (d.user.font[i]['object'] ? d.user.font[i]['object'] : '')
				}
				d.glob.ignore=d.GetIgnore();
				if(typeof(d.font[i]['object']) == 'string') d.font[i]['object']=d.DOM(d.font[i]['object']);
				// create new node for css
				if(!document.getElementById(d.font[i]['fontID'])) d.InsertScript('css', d.glob['url']+d.user.cssPath+'untitle.css', d.font[i]['fontID']);
				if(d.glob.features['wfa']){
					d.StartWFA({elem: d.font[i]['object']});
				}
				if(typeof(d.glob.count[i]) == 'undefined') d.glob.count[i]=0;
			}
			startTrigger.Initialize();
			d.glob.code={
				'wfa': d.user.code['wfa'],
				'wime': d.user.code['wime'],	
				'ppwime': d.user.code['ppwime']					
			}
			d.CreateEvent( window, "keyup", d.Hotkey );
			d.CreateEvent( window, "keydown", d.Hotkey );
			if(d.glob.features['wime'] && d.user.imeNewCSS['enable']){ //create new node for ime css
				if(!document.getElementById(d.user.imeNewCSS['id'])) d.InsertScript('css', d.glob['url']+d.user.cssPath+'untitle.css', d.user.imeNewCSS['id']);
			}				
			if(d.glob.features['ppwime']){
				if(!document.getElementById('dcw-strokeID')) d.InsertScript('css', d.glob['url']+d.user.cssPath+'stroke.css', 'dcw-strokeID');
			}
			if(d.user.downList['enable'] == true){
				// downList replace whe enable is true and browser is IE
				if(d.glob['browser'].indexOf('IE') >= 0){
					d.StartDownList(d.DOM('body'));
				} 
			}
		},
		StartDownList: function(elem){
			var node=d.GetNode('all', elem);
			var elem=d.DOM('.dcw-select-prevent');
			if(elem.parentNode) elem.parentNode.removeChild(elem);
			if(elem.length > 0){
				for(var i=0; i < elem.length; i++){
					if(elem[i].parentNode) elem[i].parentNode.removeChild(elem[i]);
				}				
			}
			node['elem']=d.SelectByNodeName('select', node['elem']);
			node['elem']=d.DeleteDuplicates(node['elem']);
			for(var i in node['elem']){
				if(d.user.prototypeDebug == true && !node['elem'].hasOwnProperty(i)) continue;
				d.downList.setting={
					elem: node['elem'][i]
				}
				d.downList.Initialize();
			}
		},
		downList: {
			setting:{},
			SelectOption :function(event){
				var self=this;
				return function(){
					var e=event || window.event;
					var target=e.target || e.srcElement;
					this.attr['option'].selectedIndex=target.getAttribute('data-value');
					d.DeleteEvent(this.attr['wrap'], 'mouseout', self.Close);
					self.Close(event, this.attr['wrap']);
				};
			},
			SetPosition: function(target, elem){
				var p=d.GetPosition(elem, 0, 0);
				target.style.position='absolute';
				target.style.top=p['top'];
				target.style.left=p['left'];	
			},
			Close: function(event, wrap){
				var e=event || window.event;
				var target=e.target || e.srcElement;
				wrap=wrap ? wrap : this.attr['wrap']
				if(target.parentNode != this){
					document.body.removeChild(wrap);
				}			
			},
			Create: function(){
				var self=this;
				return function(){
					var elem=this.attr['elem'];
					var option=elem.options;
					var wrap=document.createElement('div');
					wrap.className='dcw-select-wrap';
					wrap.style.width=elem.offsetWidth+'px';
					for(var i=0; i < option.length; i++){
						var div=document.createElement('div');
						div.className='dcw-select-option';
						div.innerHTML=option[i].value;
						div.style.fontFamily=elem.style.fontFamily;
						div.setAttribute('data-value', i);
						wrap.appendChild(div);
						div.attr={
							'option': option,
							'wrap': wrap
						}
						d.CreateEvent(div, 'mouseup', self.SelectOption());
					}
					document.body.appendChild(wrap);
					self.SetPosition(wrap, elem);
					wrap.attr={
						'wrap': wrap
					}
					d.CreateEvent(wrap, 'mouseout', self.Close);
				}
			},
			Prevent: function(){		
				var prevent=document.createElement('div');
				prevent.className='dcw-select-prevent',
				prevent.style.width=this.setting['elem'].offsetWidth+'px';
				prevent.style.height=this.setting['elem'].offsetHeight+'px';
				document.body.appendChild(prevent);
				this.SetPosition(prevent, this.setting['elem']);
				prevent.attr={
					elem: this.setting['elem']
				}
				d.CreateEvent(prevent, 'click', this.Create());
			},
			Initialize: function(){
				this.Prevent();
			}
		},
		startTrigger: {
			//!+ **StartTrigger()**
			//! + description: create trigger event at node
			Open: function(){
				d.Log('### Open', 3);
				var elem = d.GetForm( d.font[ d.glob.code.wfa ][ "object" ] );
				var elem2 = [];
				for ( var i = 0; i < elem.length; i++ ) {
					if ( d.GetClass( elem[i], d.user.trigger.sign, "fuzzy" ) == false ) {
						d.CreateClass( elem[i], d.user.trigger.sign )
						elem2.push( elem[i] );
					}
				}
				d.CreateMuchEvent.call(this, {
					'node': elem2,
					'keydown': startTrigger.Execute,
					'keyup': startTrigger.Execute,
					'click': startTrigger.Execute,
					'blur': startTrigger.Scan,
					'change': startTrigger.Scan					
				});
			},
			Close: function(){
				d.Log('### Close', 3);
				// Remove Event 
				var elem=d.GetForm(d.font[d.glob.code['wfa']]['object']);
				var elem2 = [];
				for ( var i = 0; i < elem.length; i++ ) {
					if ( d.GetClass( elem[i], d.user.trigger.sign, "fuzzy" ) == false ) {
						d.CreateClass( elem[i], d.user.trigger.sign )
						elem2.push( elem[i] );
					}
				}
				d.DeleteMuchEvent.call(this, {
					'node': elem2,
					'keydown': startTrigger.Execute,
					'keyup': startTrigger.Execute,
					'click': startTrigger.Execute,
					'blur': startTrigger.Scan,
					'change': startTrigger.Scan	
				});
			},
			Scan: function(event){
				d.Log('### Scan', 3);
				var e=event || window.event;
				var target=e.currentTarget || e.srcElement;
				var key=d.GetKeyCode(e);
				if(d.user['scan'] == 'delay'){
					clearTimeout(d.glob['startWFA']);
					d.glob['startWFA']=setTimeout(function(){
						d.StartWFA({elem: target});
					}, 1000);
				} else if(d.user['scan'] == 'blur'){
					if(e.type == 'blur ' || e.type == 'change')
						d.StartWFA({elem: target});	
				} else{
					d.StartWFA({elem: target});	
				}

			},
			Execute: function(event){
				d.Log('### Execute', 3);
				var e=event || window.event;
				var target=e.target || e.srcElement;
				if(d.glob.features['wfa']) startTrigger.Scan(event);
				if(d.glob.features['wime']){
					if(target.nodeName.toUpperCase() == 'INPUT' && (target.type).toUpperCase() != 'TEXT') return;
					if(e.type == 'keyup'){
						d.Hotkey(event);
						if(e.shiftKey){
							if(d.glob['devices'] === 'DESKTOP'){
								if(d.GetClass(d.glob.target['elem'], d.user.targetClass, 'fuzzy')){ // target has class
									var ime=d.GetIME(d.glob.target['elem'], d.user.targetClass);
									var key=d.GetKeyCode(e);
									d.OpenWIME(ime, 'show', e)
								} 
							}
						}
						if(target == d.glob.target['elem']){
							if(((target.nodeName).toUpperCase() == 'INPUT' && (target.type).toUpperCase() == 'TEXT') || (target.nodeName).toUpperCase() == 'TEXTAREA'){
								d.glob.target['elem']=target;
								d.glob.target['caret']=d.GetCaret(target)['start'];
							}
						}
					} else if(e.type == 'keydown' || e.type == 'click'){
						d.Hotkey(event);
						if(target == d.glob.target['elem'] || target == document.getElementById(d.user.WIME['compositionID'])){
							// open wime composition
							if(target == d.glob.target['elem']){
								d.glob.target['caret']=typeof(d.GetCaret(target)['start']) !== 'undefined' ? d.GetCaret(target)['start'] : d.glob.target['caret'];
							}
							if(d.glob.features['keyboard']){ // close keyboard and re open when target is the same
								d.keyboard.Close();
								d.keyboard.Execute();
							} 
							if(e.type == 'keydown'){
								if(d.glob['devices'] === 'DESKTOP'){
									if(d.GetClass(d.glob.target['elem'], d.user.targetClass, 'fuzzy')){
										// open wime when target has class and Devices is desktop
										if(e.shiftKey){
											d.PreventDefault(e);
										} else{
											var ime=d.GetIME(d.glob.target['elem'], d.user.targetClass);
											var key=d.GetKeyCode(e);
											var Func=function(){
												if(key !== 8 && key !== 9 && key !== 16 && key !== 13 && key !== 17 &&  key !== 18 && key !== 27 && key !== 37 && key !== 38 && key !== 39 && key !== 40 && d.glob.hotkey.length < 2){
													// **Tab, ESC, Backspace, Enter, Ctrl, Alt, Up, Down, Left, Right**
													d.OpenWIME(ime, 'show');
												}
											}
											if(d.user.ime2English['enable'] == true){
												if((key == 0 || key == 229) &&  key != 13){
													if(d.glob.ime2English == false){
														alert(d.user.ime2English['message'][d.user.lang]);
														d.glob.ime2English=true;
													}
												} else{
													Func();
												}
											} else{
												Func();
											}

										}
									} 
								}
							}
							if(e.type == 'click'){
								d.Close();
							}
						} else { // if target isn't the same, close all and save target
							d.Close();
							if(((target.nodeName).toUpperCase() == 'INPUT' && (target.type).toUpperCase() == 'TEXT') || (target.nodeName).toUpperCase() == 'TEXTAREA'){
								d.glob.target['elem']=target;
								d.glob.target['caret']=d.GetCaret(target)['start'];
							}
						}	
						if(!d.GetClass(d.glob.target['elem'], d.user.targetClass, 'fuzzy')){
							trigger.setting={
								enable: d.user.trigger['enable']
							}
							trigger.Initialize();
						}		
					} 
				}
			},
			Initialize: function(){
				d.Log('### Initialize', 3);
				startTrigger.Open();
			}
		},		
		trigger: {
			//!+ **CreateTrigger()**
			//! + description: create trigger
			setting:{
				//enable,
				enable: true
			},
			Open: function(){
				d.Log('### Open', 3);
				// insert template
				if(!document.getElementById(d.Rename('temp', d.user.trigger['id']))) d.SetTemplate('add', d.user.trigger['id']);
				// insert event 
				if(d.user.trigger['postion'] !== false) d.CreateEvent(window, 'resize', trigger.SetPosition);
			},
			Close: function(){
				d.Log('### Close', 3);
				// remove event
				d.DeleteEvent(window, 'resize', trigger.SetPosition);
				// remove template 
				d.SetTemplate('remove', d.user.trigger['id']);	
			},
			Set: function(){
				d.Log('### Set', 3);
				// set template
				d.SetTemplate('show', d.user.trigger['id']);
				if(d.user.trigger['postion'] !== false) trigger.SetPosition();
			},
			SetPosition: function(){
				d.Log('### SetPosition', 3);
				d.SetMirrorsPosition({
					elem: [document.getElementById(d.user.trigger['id'])],
					target: d.glob.target['elem'],
					align: d.user.trigger['align'],
					position: d.user.trigger['position'],
					top: d.user.trigger['top'],
					left: d.user.trigger['left'],
					bottom: d.user.trigger['bottom'],
					right: d.user.trigger['right']
				});
			},
			Initialize: function(){
				d.Log('### Initialize', 3);
				if(trigger.setting['enable'] === false && d.glob['devices'] != 'MOBILE') return;
				trigger.Open();
				trigger.Set();
			}
		}
	});
	//!### User Options
	d.extend({
		user: {
			lang: 'JPN', //!+ **lang** language version
			keyboard: {},
			code: {
				'wfa': 1,
				'wime': 1,
				'ppwime': 1								
			},
			font: {
				//!+ **font**
				1: {
					fn: 'gaijis.tte', //! + **ffn** Gaiji filename
					fontface: 'dcw-gaijis', //! + **fontface** Gaiji CSS fontface
					/*
					range: {
						'0xE000': '0xFEFF' //! +  **range** Gaijis range(ex: '0xE000': '0xFEFF')
					},
					*/
					object: 'body' //! +  **object** Gaijis node range
				}
			},
			hotkey: {},
			downList:{
				enable: false
			},
			defaultCSS: {
				id:'dcw-style',
				filename: 'gws.css'
			},
			mobileCSS:{
				id: 'dcw-style-mobile',
				filename: 'gws-mobile.css'
			},
			sign: {
				dcw: 'dcw-',
				font: 'font-',
				temp: 'temp-'
			},
			stateID: 'dcw-state',
			noListenClass: ['dcw-noSearch', 'dcw-candidate-str'], //!+ **notClass** Don't search this class		
			gajisClass: 'dcw-hasGaiji',
			hideClass: 'dcw-base-hide',			
			isDebug: false, //!+ **isDebug** WFS will show debug log. Can be set to **console**, **alert** or **false**
			logLevel: 1, //!+ **logLevel** 1: Value, 2: Action, 3: Function 4: About 
			compatibilityDebug: true, //!+ **compatibilityDebug** compatibility debug
			configVersion: 'Standard', //!+ **configVersion** config version
			unicode2big5:{
				enable: true, //!+ **enable** if true, WFS will open Sharp Unicode API
				remove: true, //!+ **remove** if true, WFS will open Remove this string
				action: 'alert', //!+ **message** WFS will show this message. Can be set to **console**, **alert**
				message: {
					'ENG': 'This isn\'t big5 character, please create this character.',
					'CHT': '下列文字非big5編碼文字，請在造字系統創造該字。',
					'JPN': ''
				}
			},
			scan: 'blur',
			uao2gaiji: true, //!+ **uao2gaiji** if true, WFS will open UAO API
			webFullCSS: false, //!+ **webFullCSS** if true, WFS will download full CSS when loading page
			imeFullCSS: false, //!+ **imeFullCSS** if true, WFS will download full CSS when open wime
			showType: 'string', //!+ **showType** Gaiji show type. Can be set to **image** or **string**
			cssPath: 'lib/css/', //!+ **cssPath** CSS path
			fontPath: 'outline_sin/', //!+ **cssPath** CSS path			
			imgPath: 'lib/imgs/fontImg_sin/',
			cssTempPath: 'lib/css/temp/', //!+ **cssTempPath** CSS temp path
			preprocessor: '.aspx', //!+ **preprocessor** WFC connect. Can be set to **.aspx** or **.php**
			preprocessorPath: 'socket/',	//!+ **preprocessorPath** PHP Path
			socket:{
				id: 'dcw-socketID',
				filename: 'wfc_socket' //!+ **socketFN** Soket filename	
			},
			pngPath: '/gws/outline/wfc/', //!+ **pngPath** Part Gaiji path
			prototypeDebug: true, //!+ **propertyDebug** Debug for Prototype
			queryType: 'query', //!+ **queryType** SoketPHP and QueryMDB connect type. Can be set to **ajax** or **query**
			trigger: {
				//!+ **trigger**
				enable: false, //! + **enable** If this is mobile, always set true
				node: ['input', 'textarea'],
				id: 'dcw-trigger',
				sign: "dcw-trigger-class",
				align: 'target', //! + **align** StartBtn target object. Can be set to **target** or **body**
				position: 'bottom-left', //! + **pos** StartBtn Position. Can be set to **topLeft**, **topRight**, **bottomRight** or **bottomLeft**
				top: 5,
				left: 0
			}
		}
	});	
	//!### User Options (WIME and PPWIME)
	d.extend(true, d.user, {
		queryMDB:{
			id: 'dcw-queryID',
			filename: 'wfc_mdb' //!+ **filename** queryMDB filename	
		}
	});	
	//!### Global
	d.extend({
		glob: {
			ignore: [],
			ime2English: false,
			replayCount: 0,
			stateLog:[],
			fullGaiji: {},
			fontID: null,
			code: {
				'wfa': null,
				'wime': null,
				'ppwime': null		
			},		
			statle: null,
			result: {
				//!+ **result** Gaiji result when ime Gaiji Finish
				'gaiji': [],
				'similar': []
			},
			target: {},
			browser: dynaRequire.GetBrowser()['browser'],
			devices: dynaRequire.GetBrowser()['devices'],
			shift: null,
			features: {
				wfa: null,
				uao: null,
				unicode: null,
				wime: null,
				ppwime: null
			},
			gaiji: {}	//!+ **gaiji** page all Gaiji
		}
	});
	//!### Other
	d.extend({
		lang: {
			CHT:{
				search: '搜尋'
			},
			JPN:{
				search: '検索'
			}
		},
		html: {},
		mapping: {
			uao: null,
			unicode: null,
			ascii2keyboard: {
				49 : '1', 81 : 'q', 65 : 'a', 90 : 'z', 50 : '2', 87 : 'w', 83 : 's', 88 : 'x', 69 : 'e', 68 : 'd',
				67 : 'c', 82 : 'r', 70 : 'f', 86 : 'v', 53 : '5', 84 : 't', 71 : 'g', 66 : 'b', 89 : 'y', 72 : 'h',
				78 : 'n',
				56 : '8', 73 : 'i', 75 : 'k', 188 : ',', 57 : '9', 79 : 'o', 76 : 'l', 190 : '.', 48 : '0', 80 : 'p',
				186 : ';', 191 : '/', 189 : '-',
				85 : 'u', 74 : 'j', 77 : 'm',
				54 : '6', 51 : '3', 52 : '4', 55 : '7'
			}
		}
	});
	d.extend(true, d.glob, {
		url: dynaRequire.GetDomain(),
		theProtocol: ('http:' == document.location.protocol) ? 'http' : 'https',
		pageEncode: typeof document.charset == 'undefined' ? document.characterSet.toUpperCase() : document.charset.toUpperCase(),
		fontType: d.glob['browser'].indexOf('IE') >= 0 ? 'eot' : 'tt',
		extendName: d.glob['browser'].indexOf('IE') >= 0 ? '' : '_ff'
	});
	var startTrigger=d.startTrigger;
	var trigger=d.trigger;
})(dynaGWS);
